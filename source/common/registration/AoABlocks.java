package net.tslat.aoa3.common.registration;

import net.minecraft.block.*;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialColor;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.renderer.RenderTypeLookup;
import net.minecraft.fluid.Fluid;
import net.minecraft.item.BlockItem;
import net.minecraft.item.Item;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.Rarity;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.World;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import net.minecraftforge.common.ToolType;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.fml.loading.FMLEnvironment;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.tslat.aoa3.advent.AdventOfAscension;
import net.tslat.aoa3.block.CustomToolsBlock;
import net.tslat.aoa3.block.decoration.banner.BannerBlock;
import net.tslat.aoa3.block.decoration.banner.BannerExtension;
import net.tslat.aoa3.block.decoration.misc.CarpetBlock;
import net.tslat.aoa3.block.decoration.misc.NonFullBlock;
import net.tslat.aoa3.block.functional.altar.*;
import net.tslat.aoa3.block.functional.light.LampBlock;
import net.tslat.aoa3.block.functional.light.VoxLight;
import net.tslat.aoa3.block.functional.misc.*;
import net.tslat.aoa3.block.functional.portal.NowhereActivityPortal;
import net.tslat.aoa3.block.functional.portal.NowherePortalBlock;
import net.tslat.aoa3.block.functional.portal.PortalBlock;
import net.tslat.aoa3.block.functional.sapling.DarkGrowingSapling;
import net.tslat.aoa3.block.functional.sapling.SaplingBlock;
import net.tslat.aoa3.block.functional.utility.*;
import net.tslat.aoa3.block.generation.grass.GrassBlock;
import net.tslat.aoa3.block.generation.grass.UpsideDownGrassBlock;
import net.tslat.aoa3.block.generation.grass.WaterGrassBlock;
import net.tslat.aoa3.block.generation.leaves.LeavesBlock;
import net.tslat.aoa3.block.generation.log.*;
import net.tslat.aoa3.block.generation.misc.*;
import net.tslat.aoa3.block.generation.ore.OreBlock;
import net.tslat.aoa3.block.generation.plants.*;
import net.tslat.aoa3.block.generation.stone.DenseStone;
import net.tslat.aoa3.common.registration.worldgen.AoAFeatures;
import net.tslat.aoa3.event.GlobalEvents;
import net.tslat.aoa3.util.BlockUtil;
import net.tslat.aoa3.util.BlockUtil.CompactProperties;
import net.tslat.aoa3.util.NumberUtil;
import net.tslat.aoa3.world.gen.feature.features.trees.AoATree;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;

import static net.tslat.aoa3.common.registration.AoABlocks.CustomRenderType.*;

@SuppressWarnings({"unused"})
public final class AoABlocks {
	public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, AdventOfAscension.MOD_ID);
	public static final DeferredRegister<Item> BLOCK_ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, AdventOfAscension.MOD_ID);
	public static final DeferredRegister<Fluid> FLUIDS = DeferredRegister.create(ForgeRegistries.FLUIDS, AdventOfAscension.MOD_ID);
	public static final HashMap<RegistryObject<? extends Block>, CustomRenderType> CUSTOM_RENDER_TYPES = new HashMap<RegistryObject<? extends Block>, CustomRenderType>();

	public static final RegistryObject<Block> ABYSSAL_STONE = registerBlock("abyssal_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.NETHER).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> AROMATIC_STONE = registerBlock("aromatic_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_MAGENTA).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BARON_STONE = registerBlock("baron_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_CYAN).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BRIGHT_ROCK = registerBlock("bright_rock", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_YELLOW).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_ROCK = registerBlock("coral_rock", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_STONE = registerBlock("creep_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_GREEN).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLISED_ROCK = registerBlock("crystallised_rock", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_PURPLE).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> DARKENED_ROCK = registerBlock("darkened_rock", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> DENSE_STONE = registerBlock("dense_stone", DenseStone::new, AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> FUNGAL_ROCK = registerBlock("fungal_rock", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_BLUE).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_STONE = registerBlock("greckon_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_PURPLE).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HELLSTONE = registerBlock("hellstone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.FIRE).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> IROSTONE = registerBlock("irostone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_GRAY).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_STONE = registerBlock("lelyetian_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.SAND).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> POLLUTED_STONE = registerBlock("polluted_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_LOWER_ROCK = registerBlock("precasian_lower_rock", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GREEN).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_SURFACE_ROCK = registerBlock("precasian_surface_rock", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PRESSED_CREEP_STONE = registerBlock("pressed_creep_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PRIMED_STONE = registerBlock("primed_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_GRAY).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_STONE = registerBlock("runic_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WEIGHTLESS_STONE = registerBlock("weightless_stone", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_BLUE).stats(1.5f, 10f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);

	public static final RegistryObject<Block> AROMATIC_DIRT = registerBlock("aromatic_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.COLOR_MAGENTA).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLACKENED_SOIL = registerBlock("blackened_soil", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.COLOR_GRAY).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CANDIED_DIRT = registerBlock("candied_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.COLOR_PINK).stats(0.5f).tool(ToolType.SHOVEL).sound(SoundType.WOOL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CELEVIAN_DIRT = registerBlock("celevian_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.WOOL).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_SOIL = registerBlock("coral_soil", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.TERRACOTTA_MAGENTA).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_DIRT = registerBlock("creep_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.PLANT).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> FUNGAL_DIRT = registerBlock("fungal_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.COLOR_MAGENTA).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_DIRT = registerBlock("greckon_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.TERRACOTTA_BROWN).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUNALYTE_DIRT = registerBlock("lunalyte_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.COLOR_PINK).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUNASOLE_DIRT = registerBlock("lunasole_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.ICE).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> POLLUTED_SOIL = registerBlock("polluted_soil", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.TERRACOTTA_CYAN).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WEIGHTLESS_DIRT = registerBlock("weightless_dirt", () -> new Block(new CompactProperties(Material.DIRT, MaterialColor.COLOR_MAGENTA).stats(0.5f).tool(ToolType.SHOVEL).get()), AoAItemGroups.GENERATION_BLOCKS);

	public static final RegistryObject<Block> ABYSSAL_GRASS = registerBlock("abyssal_grass", () -> new GrassBlock(MaterialColor.COLOR_RED, ABYSSAL_STONE, true, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> AROMATIC_GRASS = registerBlock("aromatic_grass", () -> new GrassBlock(MaterialColor.COLOR_LIGHT_GREEN, AROMATIC_DIRT, false), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BRIGHT_GRASS = registerBlock("bright_grass", () -> new GrassBlock(MaterialColor.GOLD, BRIGHT_ROCK, false, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CANDIED_GRASS = registerBlock("candied_grass", () -> new GrassBlock(MaterialColor.TERRACOTTA_PINK, CANDIED_DIRT, false), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CELEVIAN_GRASS = registerBlock("celevian_grass", () -> new GrassBlock(MaterialColor.COLOR_RED, CELEVIAN_DIRT, false), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_GRASS = registerBlock("coral_grass", () -> new WaterGrassBlock(MaterialColor.DIAMOND, CORAL_SOIL, false), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_GRASS = registerBlock("creep_grass", () -> new GrassBlock(MaterialColor.EMERALD, CREEP_DIRT, false), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> FADED_GRASS = registerBlock("faded_grass", () -> new GrassBlock(MaterialColor.COLOR_BLACK, BLACKENED_SOIL, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> FUNGAL_GRASS = registerBlock("fungal_grass", () -> new GrassBlock(MaterialColor.COLOR_CYAN, FUNGAL_DIRT, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_GRASS = registerBlock("greckon_grass", () -> new GrassBlock(MaterialColor.COLOR_PURPLE, GRECKON_DIRT, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> INVERTED_LELYETIAN_GRASS = registerBlock("inverted_lelyetian_grass", () -> new UpsideDownGrassBlock(MaterialColor.SAND, LELYETIAN_STONE, false, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> IROGRASS = registerBlock("irograss", () -> new GrassBlock(MaterialColor.TERRACOTTA_YELLOW, IROSTONE, false, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_GRASS = registerBlock("lelyetian_grass", () -> new GrassBlock(MaterialColor.COLOR_ORANGE, LELYETIAN_STONE, false, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUNALYTE_GRASS = registerBlock("lunalyte_grass", () -> new GrassBlock(MaterialColor.COLOR_MAGENTA, LUNALYTE_DIRT, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUNASOLE_GRASS = registerBlock("lunasole_grass", () -> new GrassBlock(MaterialColor.COLOR_BLUE, LUNASOLE_DIRT, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> POLLUTED_GRASS = registerBlock("polluted_grass", () -> new GrassBlock(MaterialColor.TERRACOTTA_GREEN, POLLUTED_SOIL, false), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_GRASS = registerBlock("precasian_grass", () -> new GrassBlock(MaterialColor.GRASS, PRECASIAN_SURFACE_ROCK, false, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_GRASS = registerBlock("runic_grass", () -> new GrassBlock(MaterialColor.LAPIS, RUNIC_STONE, false, true), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WEIGHTLESS_GRASS = registerBlock("weightless_grass", () -> new GrassBlock(MaterialColor.DIAMOND, WEIGHTLESS_DIRT, false), AoAItemGroups.GENERATION_BLOCKS);

	public static final RegistryObject<Block> AMETHYST_ORE = customRender(registerBlock("amethyst_ore", () -> new OreBlock(MaterialColor.STONE, 2, 8, 2), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> BARONYTE_ORE = customRender(registerBlock("baronyte_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_CYAN, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> BLAZIUM_ORE = customRender(registerBlock("blazium_ore", () -> new OreBlock(MaterialColor.FIRE, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> BLOODSTONE_ORE = customRender(registerBlock("bloodstone_ore", () -> new OreBlock(MaterialColor.NETHER, 6, 11, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> CHARGED_RUNIUM_ORE = customRender(registerBlock("charged_runium_ore", () -> new OreBlock(MaterialColor.COLOR_LIGHT_GRAY, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> CRYSTALLITE_ORE = customRender(registerBlock("crystallite_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_LIGHT_BLUE, 6, 11, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> ELECANIUM_ORE = customRender(registerBlock("elecanium_ore", () -> new OreBlock(MaterialColor.COLOR_BLUE, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> EMBERSTONE_ORE = customRender(registerBlock("emberstone_ore", () -> new OreBlock(MaterialColor.NETHER, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> CHESTBONE_FRAGMENTS_ORE = customRender(registerBlock("chestbone_fragments_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_GREEN, 4, 8, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> FOOTBONE_FRAGMENTS_ORE = customRender(registerBlock("footbone_fragments_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_GREEN, 4, 8, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> LEGBONE_FRAGMENTS_ORE = customRender(registerBlock("legbone_fragments_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_GREEN, 4, 8, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> SKULLBONE_FRAGMENTS_ORE = customRender(registerBlock("skullbone_fragments_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_GREEN, 4, 8, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> GEMENYTE_ORE = customRender(registerBlock("gemenyte_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_LIGHT_GREEN, 4, 8, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> BLUE_GEMSTONE_ORE = customRender(registerBlock("blue_gemstone_ore", () -> new OreBlock(MaterialColor.COLOR_PURPLE, 4, 7, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> GREEN_GEMSTONE_ORE = customRender(registerBlock("green_gemstone_ore", () -> new OreBlock(MaterialColor.COLOR_PURPLE, 4, 7, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> PURPLE_GEMSTONE_ORE = customRender(registerBlock("purple_gemstone_ore", () -> new OreBlock(MaterialColor.COLOR_PURPLE, 4, 7, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> RED_GEMSTONE_ORE = customRender(registerBlock("red_gemstone_ore", () -> new OreBlock(MaterialColor.COLOR_PURPLE, 4, 7, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> WHITE_GEMSTONE_ORE = customRender(registerBlock("white_gemstone_ore", () -> new OreBlock(MaterialColor.COLOR_PURPLE, 4, 7, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> YELLOW_GEMSTONE_ORE = customRender(registerBlock("yellow_gemstone_ore", () -> new OreBlock(MaterialColor.COLOR_PURPLE, 4, 7, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> GHASTLY_ORE = customRender(registerBlock("ghastly_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_PURPLE, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> GHOULISH_ORE = customRender(registerBlock("ghoulish_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_PURPLE, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> JADE_ORE = customRender(registerBlock("jade_ore", () -> new OreBlock(MaterialColor.COLOR_PURPLE, 3, 8, 2), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> JEWELYTE_ORE = customRender(registerBlock("jewelyte_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_LIGHT_GREEN, 4, 8, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> LIMONITE_ORE = customRender(registerBlock("limonite_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_GREEN, 1), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> LYON_ORE = customRender(registerBlock("lyon_ore", () -> new OreBlock(MaterialColor.COLOR_GRAY, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> MYSTITE_ORE = customRender(registerBlock("mystite_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_BLUE, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> ORNAMYTE_ORE = customRender(registerBlock("ornamyte_ore", () -> new OreBlock(MaterialColor.COLOR_GRAY, 4, 8, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> ROSITE_ORE = customRender(registerBlock("rosite_ore", () -> new OreBlock(MaterialColor.STONE, 2), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> RUNIUM_ORE = customRender(registerBlock("runium_ore", () -> new OreBlock(MaterialColor.STONE, 2), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> SAPPHIRE_ORE = customRender(registerBlock("sapphire_ore", () -> new OreBlock(MaterialColor.STONE, 4, 9, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> SHYREGEM_ORE = customRender(registerBlock("shyregem_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_YELLOW, 6, 13, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> SHYRESTONE_ORE = customRender(registerBlock("shyrestone_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_YELLOW, 4), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> VARSIUM_ORE = customRender(registerBlock("varsium_ore", () -> new OreBlock(MaterialColor.TERRACOTTA_CYAN, 3), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);

	public static final RegistryObject<Block> BARON_BRICKS = registerBlock("baron_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_ORANGE).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODSTONE_BRICKS = registerBlock("bloodstone_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_BRICKS = registerBlock("coral_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_CYAN).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEPONIA_BRICKS = registerBlock("creeponia_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.EMERALD).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLITE_BRICKS = registerBlock("crystallite_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_YELLOW).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTEVIA_BRICKS = registerBlock("crystevia_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_PURPLE).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARKWASH_BRICKS = registerBlock("darkwash_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(50f, 2000f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARK_BRICKS = registerBlock("dark_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GARDENCIA_BRICKS = registerBlock("gardencia_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.EMERALD).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_BRICKS = registerBlock("greckon_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_PURPLE).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_BRICKS = registerBlock("haunted_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_PURPLE).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_DOTTED_BRICKS = registerBlock("iro_dotted_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_YELLOW).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_STRIPED_BRICKS = registerBlock("iro_striped_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_YELLOW).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_BRICKS = registerBlock("lelyetian_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.FIRE).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_BRICKS = registerBlock("lunar_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_PINK).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_MYSTERIUM_BRICKS = registerBlock("black_mysterium_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_GRAY).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_MYSTERIUM_BRICKS = registerBlock("green_mysterium_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.PLANT).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ROSIDIAN_BRICKS = registerBlock("rosidian_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_PURPLE).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_CONSTRUCT_BRICKS = registerBlock("runic_construct_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.WATER).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_SHYRE_BRICKS = registerBlock("white_shyre_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.METAL).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_SHYRE_BRICKS = registerBlock("yellow_shyre_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_YELLOW).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SKELETAL_BRICKS = registerBlock("skeletal_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).stats(10f, 15f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITEWASH_BRICKS = registerBlock("whitewash_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.QUARTZ).stats(50f, 2000f).harvestTool(ToolType.PICKAXE).sound(SoundType.NETHER_BRICKS).get()), AoAItemGroups.DECORATION_BLOCKS);
	// TODO Block map colours down from here
	public static final RegistryObject<Block> INTRICATE_AMETHYST_IVORY = registerBlock("intricate_amethyst_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_BLUE).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_IVORY = registerBlock("intricate_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.QUARTZ).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_JADE_IVORY = registerBlock("intricate_jade_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_LIMONITE_IVORY = registerBlock("intricate_limonite_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_ROSITE_IVORY = registerBlock("intricate_rosite_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_RED).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_SAPPHIRE_IVORY = registerBlock("intricate_sapphire_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_BLUE).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_AMETHYST_IVORY = registerBlock("natural_amethyst_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_BLUE).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_IVORY = registerBlock("natural_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.QUARTZ).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_JADE_IVORY = registerBlock("natural_jade_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_LIMONITE_IVORY = registerBlock("natural_limonite_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_ROSITE_IVORY = registerBlock("natural_rosite_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_RED).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_SAPPHIRE_IVORY = registerBlock("natural_sapphire_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_BLUE).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_AMETHYST_IVORY = registerBlock("ornate_amethyst_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_BLUE).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_IVORY = registerBlock("ornate_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.QUARTZ).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_JADE_IVORY = registerBlock("ornate_jade_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_LIMONITE_IVORY = registerBlock("ornate_limonite_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_ROSITE_IVORY = registerBlock("ornate_rosite_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_RED).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_SAPPHIRE_IVORY = registerBlock("ornate_sapphire_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_BLUE).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_AMETHYST_IVORY = registerBlock("patterned_amethyst_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_BLUE).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_IVORY = registerBlock("patterned_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.QUARTZ).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_JADE_IVORY = registerBlock("patterned_jade_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_LIMONITE_IVORY = registerBlock("patterned_limonite_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_ROSITE_IVORY = registerBlock("patterned_rosite_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_RED).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_SAPPHIRE_IVORY = registerBlock("patterned_sapphire_ivory", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_LIGHT_BLUE).stats(5f, 5f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<SaplingBlock> ACHONY_SAPLING = customRender(registerBlock("achony_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.ACHONY_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> BLOODTWISTER_SAPLING = customRender(registerBlock("bloodtwister_sapling", () -> new DarkGrowingSapling(new AoATree(AoAFeatures.Features.BLOODTWISTER_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> BLUE_CELEVUS_SAPLING = customRender(registerBlock("blue_celevus_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.BLUE_CELEVUS_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> GREEN_CELEVUS_SAPLING = customRender(registerBlock("green_celevus_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.GREEN_CELEVUS_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> PURPLE_CELEVUS_SAPLING = customRender(registerBlock("purple_celevus_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.PURPLE_CELEVUS_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> RED_CELEVUS_SAPLING = customRender(registerBlock("red_celevus_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.RED_CELEVUS_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> YELLOW_CELEVUS_SAPLING = customRender(registerBlock("yellow_celevus_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.YELLOW_CELEVUS_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> CHURRY_SAPLING = customRender(registerBlock("churry_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.CHURRY_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> CREEP_SAPLING = customRender(registerBlock("creep_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.CREEP_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> DAWNWOOD_SAPLING = customRender(registerBlock("dawnwood_sapling", () -> new DarkGrowingSapling(new AoATree(AoAFeatures.Features.DAWNWOOD_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> EYEBUSH_SAPLING = customRender(registerBlock("eyebush_sapling", () -> new DarkGrowingSapling(new AoATree(AoAFeatures.Features.EYEBUSH_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> EYE_HANGER_SAPLING = customRender(registerBlock("eye_hanger_sapling", () -> new DarkGrowingSapling(new AoATree(AoAFeatures.Features.EYE_HANGER_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> HAUNTED_SAPLING = customRender(registerBlock("haunted_sapling", () -> new DarkGrowingSapling(new AoATree(AoAFeatures.Features.HAUNTED_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> BLUE_HAVEN_SAPLING = customRender(registerBlock("blue_haven_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.BLUE_HAVEN_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> PINK_HAVEN_SAPLING = customRender(registerBlock("pink_haven_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.PINK_HAVEN_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> PURPLE_HAVEN_SAPLING = customRender(registerBlock("purple_haven_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.PURPLE_HAVEN_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> RED_HAVEN_SAPLING = customRender(registerBlock("red_haven_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.RED_HAVEN_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> TURQUOISE_HAVEN_SAPLING = customRender(registerBlock("turquoise_haven_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.TURQUOISE_HAVEN_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> YELLOW_HAVEN_SAPLING = customRender(registerBlock("yellow_haven_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.YELLOW_HAVEN_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> IRODUST_SAPLING = customRender(registerBlock("irodust_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.IRODUST_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> IROGOLD_SAPLING = customRender(registerBlock("irogold_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.IROGOLD_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> LUCALUS_SAPLING = customRender(registerBlock("lucalus_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.LUCALUS_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> LUNICIA_SAPLING = customRender(registerBlock("lunicia_sapling", () -> new DarkGrowingSapling(new AoATree(AoAFeatures.Features.LUNICIA_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> LUNOSSO_SAPLING = customRender(registerBlock("lunosso_sapling", () -> new DarkGrowingSapling(new AoATree(AoAFeatures.Features.LUNOSSO_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> RUNIC_SAPLING = customRender(registerBlock("runic_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.RUNIC_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> SHADOW_SAPLING = customRender(registerBlock("shadow_sapling", () -> new DarkGrowingSapling(new AoATree(AoAFeatures.Features.SHADOW_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> BRIGHT_SHYRE_SAPLING = customRender(registerBlock("bright_shyre_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.BRIGHT_SHYRE_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> SHYRE_SAPLING = customRender(registerBlock("shyre_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.NORMAL_SHYRE_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<SaplingBlock> STRANGLEWOOD_SAPLING = customRender(registerBlock("stranglewood_sapling", () -> new SaplingBlock(new AoATree(AoAFeatures.Features.STRANGLEWOOD_TREE), new CompactProperties(Material.PLANT, MaterialColor.PLANT).randomTicks().noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);

	public static final RegistryObject<Block> ACHONY_LEAVES = customRender(registerBlock("achony_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 58f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> BLOOD_LEAVES = customRender(registerBlock("blood_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 30f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> BLUE_CELEVUS_LEAVES = customRender(registerBlock("blue_celevus_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 36f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> GREEN_CELEVUS_LEAVES = customRender(registerBlock("green_celevus_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 36f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> PURPLE_CELEVUS_LEAVES = customRender(registerBlock("purple_celevus_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 36f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> RED_CELEVUS_LEAVES = customRender(registerBlock("red_celevus_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 36f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> WHITE_CELEVUS_LEAVES = customRender(registerBlock("white_celevus_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 36f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> YELLOW_CELEVUS_LEAVES = customRender(registerBlock("yellow_celevus_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 36f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> CHURRY_LEAVES = customRender(registerBlock("churry_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 66f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> CREEP_LEAVES = customRender(registerBlock("creep_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 17f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> DAWN_LEAVES = customRender(registerBlock("dawn_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 15f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> HAUNTED_LEAVES = customRender(registerBlock("haunted_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 60f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> HAUNTED_EYES_LEAVES = customRender(registerBlock("haunted_eyes_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 60f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> BLUE_HAVEN_LEAVES = customRender(registerBlock("blue_haven_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 38f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> PINK_HAVEN_LEAVES = customRender(registerBlock("pink_haven_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 38f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> PURPLE_HAVEN_LEAVES = customRender(registerBlock("purple_haven_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 38f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> RED_HAVEN_LEAVES = customRender(registerBlock("red_haven_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 38f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> TURQUOISE_HAVEN_LEAVES = customRender(registerBlock("turquoise_haven_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 38f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> YELLOW_HAVEN_LEAVES = customRender(registerBlock("yellow_haven_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 38f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> IRODUST_LEAVES = customRender(registerBlock("irodust_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 19f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> IROGOLD_LEAVES = customRender(registerBlock("irogold_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 9f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> LELYETIAN_LEAVES = customRender(registerBlock("lelyetian_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 0), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> LUCALUS_LEAVES = customRender(registerBlock("lucalus_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 45f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> LUNICIA_LEAVES = customRender(registerBlock("lunicia_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 14f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> LUNOSSO_LEAVES = customRender(registerBlock("lunosso_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 8f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> RUNIC_LEAVES = customRender(registerBlock("runic_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 8f), AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> SHADOWBLOOD_LEAVES = customRender(registerBlock("shadowblood_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 21f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> SHADOW_LEAVES = customRender(registerBlock("shadow_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 27f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> BRIGHT_SHYRE_LEAVES = customRender(registerBlock("bright_shyre_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 7f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> SHYRE_LEAVES = customRender(registerBlock("shyre_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 7f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> STRANGLEWOOD_LEAVES = customRender(registerBlock("stranglewood_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 34f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> VEIN_LEAVES = customRender(registerBlock("vein_leaves", () -> new LeavesBlock(MaterialColor.PLANT, 1 / 30f), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);

	public static final RegistryObject<Block> ACHONY_LOG = registerBlock("achony_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLOOD_LOG = registerBlock("blood_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CHURRY_LOG = registerBlock("churry_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_LOG = registerBlock("creep_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> DAWN_LOG = registerBlock("dawn_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> EYEBALL_LOG = registerBlock("eyeball_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_LOG = registerBlock("haunted_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_EYE_LOG = registerBlock("haunted_eye_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_EYES_LOG = registerBlock("haunted_eyes_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_FLASHING_LOG = registerBlock("haunted_flashing_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_PURPLING_LOG = registerBlock("haunted_purpling_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> IROLOG = registerBlock("irolog", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_LOG = registerBlock("lucalus_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_LOG = registerBlock("lunide_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_LOG = registerBlock("runic_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> SHADOW_LOG = registerBlock("shadow_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> SHYRE_LOG = registerBlock("shyre_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD_LOG = registerBlock("stranglewood_log", StranglewoodLog::new, AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TOXIC_LOG = registerBlock("toxic_log", () -> new LogBlock(MaterialColor.COLOR_BROWN, MaterialColor.TERRACOTTA_BROWN), AoAItemGroups.GENERATION_BLOCKS);

	public static final RegistryObject<Block> ACHONY_WOOD = registerBlock("achony_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(ACHONY_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLOOD_WOOD = registerBlock("blood_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(BLOOD_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CHURRY_WOOD = registerBlock("churry_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(CHURRY_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_WOOD = registerBlock("creep_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(CREEP_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> DAWN_WOOD = registerBlock("dawn_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(DAWN_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> EYEBALL_WOOD = registerBlock("eyeball_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(EYEBALL_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_WOOD = registerBlock("haunted_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(HAUNTED_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_EYE_WOOD = registerBlock("haunted_eye_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(HAUNTED_EYE_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_EYES_WOOD = registerBlock("haunted_eyes_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(HAUNTED_EYES_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_FLASHING_WOOD = registerBlock("haunted_flashing_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(HAUNTED_FLASHING_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_PURPLING_WOOD = registerBlock("haunted_purpling_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(HAUNTED_PURPLING_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> IROWOOD = registerBlock("irowood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(IROLOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_WOOD = registerBlock("lucalus_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(LUCALUS_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_WOOD = registerBlock("lunide_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(LUNIDE_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_WOOD = registerBlock("runic_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(RUNIC_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> SHADOW_WOOD = registerBlock("shadow_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(SHADOW_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> SHYRE_WOOD = registerBlock("shyre_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(SHYRE_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD = registerBlock("stranglewood", Stranglewood::new, AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TOXIC_WOOD = registerBlock("toxic_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.copy(TOXIC_LOG.get())), AoAItemGroups.GENERATION_BLOCKS);

	public static final RegistryObject<Block> STRIPPED_ACHONY_LOG = registerBlock("stripped_achony_log", () -> new StrippedLog(ACHONY_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_BLOOD_LOG = registerBlock("stripped_blood_log", () -> new StrippedLog(BLOOD_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_CHURRY_LOG = registerBlock("stripped_churry_log", () -> new StrippedLog(CHURRY_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_CREEP_LOG = registerBlock("stripped_creep_log", () -> new StrippedLog(CREEP_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_DAWN_LOG = registerBlock("stripped_dawn_log", () -> new StrippedLog(DAWN_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_EYEBALL_LOG = registerBlock("stripped_eyeball_log", () -> new StrippedLog(EYEBALL_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_LOG = registerBlock("stripped_haunted_log", () -> new StrippedLog(HAUNTED_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_EYE_LOG = registerBlock("stripped_haunted_eye_log", () -> new StrippedLog(HAUNTED_EYE_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_EYES_LOG = registerBlock("stripped_haunted_eyes_log", () -> new StrippedLog(HAUNTED_EYES_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_FLASHING_LOG = registerBlock("stripped_haunted_flashing_log", () -> new StrippedLog(HAUNTED_FLASHING_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_PURPLING_LOG = registerBlock("stripped_haunted_purpling_log", () -> new StrippedLog(HAUNTED_PURPLING_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_IROLOG = registerBlock("stripped_irolog", () -> new StrippedLog(IROLOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_LUCALUS_LOG = registerBlock("stripped_lucalus_log", () -> new StrippedLog(LUCALUS_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_LUNIDE_LOG = registerBlock("stripped_lunide_log", () -> new StrippedLog(LUNIDE_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_RUNIC_LOG = registerBlock("stripped_runic_log", () -> new StrippedLog(RUNIC_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_SHADOW_LOG = registerBlock("stripped_shadow_log", () -> new StrippedLog(SHADOW_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_SHYRE_LOG = registerBlock("stripped_shyre_log", () -> new StrippedLog(SHYRE_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_STRANGLEWOOD_LOG = registerBlock("stripped_stranglewood_log", () -> new StrippedLog(STRANGLEWOOD_LOG), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_TOXIC_LOG = registerBlock("stripped_toxic_log", () -> new StrippedLog(TOXIC_LOG), AoAItemGroups.GENERATION_BLOCKS);

	public static final RegistryObject<Block> STRIPPED_ACHONY_WOOD = registerBlock("stripped_achony_wood", () -> new StrippedLog(ACHONY_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_BLOOD_WOOD = registerBlock("stripped_blood_wood", () -> new StrippedLog(BLOOD_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_CHURRY_WOOD = registerBlock("stripped_churry_wood", () -> new StrippedLog(CHURRY_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_CREEP_WOOD = registerBlock("stripped_creep_wood", () -> new StrippedLog(CREEP_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_DAWN_WOOD = registerBlock("stripped_dawn_wood", () -> new StrippedLog(DAWN_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_EYEBALL_WOOD = registerBlock("stripped_eyeball_wood", () -> new StrippedLog(EYEBALL_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_WOOD = registerBlock("stripped_haunted_wood", () -> new StrippedLog(HAUNTED_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_EYE_WOOD = registerBlock("stripped_haunted_eye_wood", () -> new StrippedLog(HAUNTED_EYE_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_EYES_WOOD = registerBlock("stripped_haunted_eyes_wood", () -> new StrippedLog(HAUNTED_EYES_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_FLASHING_WOOD = registerBlock("stripped_haunted_flashing_wood", () -> new StrippedLog(HAUNTED_FLASHING_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_HAUNTED_PURPLING_WOOD = registerBlock("stripped_haunted_purpling_wood", () -> new StrippedLog(HAUNTED_PURPLING_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_IROWOOD = registerBlock("stripped_irowood", () -> new StrippedLog(IROWOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_LUCALUS_WOOD = registerBlock("stripped_lucalus_wood", () -> new StrippedLog(LUCALUS_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_LUNIDE_WOOD = registerBlock("stripped_lunide_wood", () -> new StrippedLog(LUNIDE_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_RUNIC_WOOD = registerBlock("stripped_runic_wood", () -> new StrippedLog(RUNIC_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_SHADOW_WOOD = registerBlock("stripped_shadow_wood", () -> new StrippedLog(SHADOW_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_SHYRE_WOOD = registerBlock("stripped_shyre_wood", () -> new StrippedLog(SHYRE_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_STRANGLEWOOD = registerBlock("stripped_stranglewood", () -> new StrippedLog(STRANGLEWOOD), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_TOXIC_WOOD = registerBlock("stripped_toxic_wood", () -> new StrippedLog(TOXIC_WOOD), AoAItemGroups.GENERATION_BLOCKS);
	
	public static final RegistryObject<Block> ACHONY_PLANKS = registerBlock("achony_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODWOOD_PLANKS = registerBlock("bloodwood_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CHURRY_PLANKS = registerBlock("churry_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_PLANKS = registerBlock("creep_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DAWNWOOD_PLANKS = registerBlock("dawnwood_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTEDWOOD_PLANKS = registerBlock("hauntedwood_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IROWOOD_PLANKS = registerBlock("irowood_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_PLANKS = registerBlock("lucalus_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_PLANKS = registerBlock("lunide_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_PLANKS = registerBlock("runic_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHADOW_PLANKS = registerBlock("shadow_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHYRE_PLANKS = registerBlock("shyre_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD_PLANKS = registerBlock("stranglewood_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> TOXICWOOD_PLANKS = registerBlock("toxicwood_planks", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(2f, 3f).get()), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> ANCIENT_LIGHT = registerBlock("ancient_light", () -> new Block(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.5f, 0.3f).light(15).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ARCHAIC_LIGHT = registerBlock("archaic_light", () -> new Block(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.5f, 0.3f).light(15).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_CRYSTAL = registerBlock("creep_crystal", () -> new Block(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.5f, 0.3f).light(15).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARKSTONE = registerBlock("darkstone", () -> new Block(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.5f, 0.3f).light(15).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DEEP_CRYSTAL = registerBlock("deep_crystal", () -> new Block(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.5f, 0.3f).light(15).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HIVE_LIGHT = registerBlock("hive_light", () -> new Block(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.5f, 0.3f).light(15).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> STEEL_LIGHT = registerBlock("steel_light", () -> new Block(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.5f, 0.3f).light(15).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> TWINKLESTONE = registerBlock("twinklestone", () -> new Block(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.5f, 0.3f).light(15).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> VOX_LIGHT = registerBlock("vox_light", VoxLight::new, AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> AMETHYST_LAMP = registerBlock("amethyst_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> AQUATIC_LAMP = registerBlock("aquatic_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARONYTE_LAMP = registerBlock("baronyte_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLAZIUM_LAMP = registerBlock("blazium_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODSTONE_LAMP = registerBlock("bloodstone_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLITE_LAMP = registerBlock("crystallite_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ELECANIUM_LAMP = registerBlock("elecanium_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> EMBERSTONE_LAMP = registerBlock("emberstone_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> FIRE_LAMP = registerBlock("fire_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GHASTLY_LAMP = registerBlock("ghastly_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GHOULISH_LAMP = registerBlock("ghoulish_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_LAMP = registerBlock("iro_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IVORY_LAMP = registerBlock("ivory_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IVORY_AMETHYST_LAMP = registerBlock("ivory_amethyst_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IVORY_JADE_LAMP = registerBlock("ivory_jade_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IVORY_LIMONITE_LAMP = registerBlock("ivory_limonite_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IVORY_ROSITE_LAMP = registerBlock("ivory_rosite_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IVORY_SAPPHIRE_LAMP = registerBlock("ivory_sapphire_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> JADE_LAMP = registerBlock("jade_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> AQUA_STAINED_GLASS_LAMP = registerBlock("aqua_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_STAINED_GLASS_LAMP = registerBlock("black_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLUE_STAINED_GLASS_LAMP = registerBlock("blue_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BROWN_STAINED_GLASS_LAMP = registerBlock("brown_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CYAN_STAINED_GLASS_LAMP = registerBlock("cyan_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARK_GREY_STAINED_GLASS_LAMP = registerBlock("dark_grey_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_STAINED_GLASS_LAMP = registerBlock("green_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GREY_STAINED_GLASS_LAMP = registerBlock("grey_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LIME_STAINED_GLASS_LAMP = registerBlock("lime_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> MAGENTA_STAINED_GLASS_LAMP = registerBlock("magenta_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORANGE_STAINED_GLASS_LAMP = registerBlock("orange_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PINK_STAINED_GLASS_LAMP = registerBlock("pink_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PURPLE_STAINED_GLASS_LAMP = registerBlock("purple_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RED_STAINED_GLASS_LAMP = registerBlock("red_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_STAINED_GLASS_LAMP = registerBlock("white_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_STAINED_GLASS_LAMP = registerBlock("yellow_stained_glass_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LIMONITE_LAMP = registerBlock("limonite_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_LAMP = registerBlock("lunar_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LYON_LAMP = registerBlock("lyon_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> MYSTIC_LAMP = registerBlock("mystic_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NEON_LAMP = registerBlock("neon_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NEON_CIRCLING_LAMP = registerBlock("neon_circling_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NEON_LAPIS_LAMP = registerBlock("neon_lapis_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NEON_LAPIS_CIRCLING_LAMP = registerBlock("neon_lapis_circling_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NEON_LAPIS_TRIANGLES_LAMP = registerBlock("neon_lapis_triangles_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NEON_RUNIC_LAMP = registerBlock("neon_runic_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NEON_TRIANGLES_LAMP = registerBlock("neon_triangles_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ROSITE_LAMP = registerBlock("rosite_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SAPPHIRE_LAMP = registerBlock("sapphire_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SKELETAL_LAMP = registerBlock("skeletal_lamp", () -> new LampBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).light(state -> state.getValue(RedstoneLampBlock.LIT) ? 14 : 0).get()), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> ABYSSAL_GLASS = customRender(registerBlock("abyssal_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> ANCIENT_GLASS = customRender(registerBlock("ancient_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> AQUATIC_GLASS = customRender(registerBlock("aquatic_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> ARCHAIC_GLASS = customRender(registerBlock("archaic_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> BARON_GLASS = customRender(registerBlock("baron_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> DECAYED_GLASS = customRender(registerBlock("decayed_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> GARDENCIAN_GLASS = customRender(registerBlock("gardencian_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> HAVEN_GLASS = customRender(registerBlock("haven_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> IRO_GLASS = customRender(registerBlock("iro_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> LELYETIAN_GLASS = customRender(registerBlock("lelyetian_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> LUNAR_GLASS = customRender(registerBlock("lunar_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> RUNIC_GLASS = customRender(registerBlock("runic_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> SHYRE_GLASS = customRender(registerBlock("shyre_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> VOX_GLASS = customRender(registerBlock("vox_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> ZHINX_GLASS = customRender(registerBlock("zhinx_glass", () -> new GlassBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(0.3f).noOcclusion().get()), AoAItemGroups.DECORATION_BLOCKS), TRANSLUCENT);

	public static final RegistryObject<Block> ABYSSAL_STONE_SLAB = registerBlock("abyssal_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ABYSSAL_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> AROMATIC_STONE_SLAB = registerBlock("aromatic_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(AROMATIC_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARON_STONE_SLAB = registerBlock("baron_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(BARON_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BRIGHT_ROCK_SLAB = registerBlock("bright_rock_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(BRIGHT_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_ROCK_SLAB = registerBlock("coral_rock_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CORAL_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_STONE_SLAB = registerBlock("creep_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CREEP_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLISED_ROCK_SLAB = registerBlock("crystallised_rock_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CRYSTALLISED_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARKENED_ROCK_SLAB = registerBlock("darkened_rock_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(DARKENED_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DENSE_STONE_SLAB = registerBlock("dense_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(DENSE_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> FUNGAL_ROCK_SLAB = registerBlock("fungal_rock_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(FUNGAL_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_STONE_SLAB = registerBlock("greckon_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(GRECKON_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HELLSTONE_SLAB = registerBlock("hellstone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(HELLSTONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IROSTONE_SLAB = registerBlock("irostone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(IROSTONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_STONE_SLAB = registerBlock("lelyetian_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(LELYETIAN_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> POLLUTED_STONE_SLAB = registerBlock("polluted_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(POLLUTED_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_LOWER_ROCK_SLAB = registerBlock("precasian_lower_rock_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PRECASIAN_LOWER_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_SURFACE_ROCK_SLAB = registerBlock("precasian_surface_rock_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PRECASIAN_SURFACE_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRESSED_CREEP_STONE_SLAB = registerBlock("pressed_creep_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PRESSED_CREEP_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRIMED_STONE_SLAB = registerBlock("primed_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PRIMED_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_STONE_SLAB = registerBlock("runic_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(RUNIC_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WEIGHTLESS_STONE_SLAB = registerBlock("weightless_stone_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(WEIGHTLESS_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARON_BRICKS_SLAB = registerBlock("baron_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(BARON_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_MYSTERIUM_BRICKS_SLAB = registerBlock("black_mysterium_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(BLACK_MYSTERIUM_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODSTONE_BRICKS_SLAB = registerBlock("bloodstone_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(BLOODSTONE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_BRICKS_SLAB = registerBlock("coral_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CORAL_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEPONIA_BRICKS_SLAB = registerBlock("creeponia_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CREEPONIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLITE_BRICKS_SLAB = registerBlock("crystallite_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CRYSTALLITE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTEVIA_BRICKS_SLAB = registerBlock("crystevia_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CRYSTEVIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARKWASH_BRICKS_SLAB = registerBlock("darkwash_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(DARKWASH_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARK_BRICKS_SLAB = registerBlock("dark_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(DARK_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GARDENCIA_BRICKS_SLAB = registerBlock("gardencia_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(GARDENCIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_BRICKS_SLAB = registerBlock("greckon_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(GRECKON_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_MYSTERIUM_BRICKS_SLAB = registerBlock("green_mysterium_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(GREEN_MYSTERIUM_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_BRICKS_SLAB = registerBlock("haunted_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(HAUNTED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_DOTTED_BRICKS_SLAB = registerBlock("iro_dotted_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(IRO_DOTTED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_STRIPED_BRICKS_SLAB = registerBlock("iro_striped_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(IRO_STRIPED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_BRICKS_SLAB = registerBlock("lelyetian_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(LELYETIAN_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_BRICKS_SLAB = registerBlock("lunar_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(LUNAR_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ROSIDIAN_BRICKS_SLAB = registerBlock("rosidian_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ROSIDIAN_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_CONSTRUCT_BRICKS_SLAB = registerBlock("runic_construct_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(RUNIC_CONSTRUCT_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SKELETAL_BRICKS_SLAB = registerBlock("skeletal_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(SKELETAL_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITEWASH_BRICKS_SLAB = registerBlock("whitewash_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(WHITEWASH_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_SHYRE_BRICKS_SLAB = registerBlock("white_shyre_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(WHITE_SHYRE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_SHYRE_BRICKS_SLAB = registerBlock("yellow_shyre_bricks_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(YELLOW_SHYRE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_AMETHYST_IVORY_SLAB = registerBlock("intricate_amethyst_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(INTRICATE_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_IVORY_SLAB = registerBlock("intricate_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(INTRICATE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_JADE_IVORY_SLAB = registerBlock("intricate_jade_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(INTRICATE_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_LIMONITE_IVORY_SLAB = registerBlock("intricate_limonite_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(INTRICATE_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_ROSITE_IVORY_SLAB = registerBlock("intricate_rosite_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(INTRICATE_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_SAPPHIRE_IVORY_SLAB = registerBlock("intricate_sapphire_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(INTRICATE_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_AMETHYST_IVORY_SLAB = registerBlock("natural_amethyst_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(NATURAL_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_IVORY_SLAB = registerBlock("natural_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(NATURAL_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_JADE_IVORY_SLAB = registerBlock("natural_jade_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(NATURAL_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_LIMONITE_IVORY_SLAB = registerBlock("natural_limonite_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(NATURAL_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_ROSITE_IVORY_SLAB = registerBlock("natural_rosite_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(NATURAL_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_SAPPHIRE_IVORY_SLAB = registerBlock("natural_sapphire_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(NATURAL_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_AMETHYST_IVORY_SLAB = registerBlock("ornate_amethyst_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ORNATE_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_IVORY_SLAB = registerBlock("ornate_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ORNATE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_JADE_IVORY_SLAB = registerBlock("ornate_jade_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ORNATE_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_LIMONITE_IVORY_SLAB = registerBlock("ornate_limonite_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ORNATE_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_ROSITE_IVORY_SLAB = registerBlock("ornate_rosite_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ORNATE_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_SAPPHIRE_IVORY_SLAB = registerBlock("ornate_sapphire_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ORNATE_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_AMETHYST_IVORY_SLAB = registerBlock("patterned_amethyst_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PATTERNED_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_IVORY_SLAB = registerBlock("patterned_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PATTERNED_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_JADE_IVORY_SLAB = registerBlock("patterned_jade_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PATTERNED_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_LIMONITE_IVORY_SLAB = registerBlock("patterned_limonite_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PATTERNED_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_ROSITE_IVORY_SLAB = registerBlock("patterned_rosite_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PATTERNED_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_SAPPHIRE_IVORY_SLAB = registerBlock("patterned_sapphire_ivory_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(PATTERNED_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ACHONY_SLAB = registerBlock("achony_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(ACHONY_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODWOOD_SLAB = registerBlock("bloodwood_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(BLOODWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CHURRY_SLAB = registerBlock("churry_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CHURRY_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_SLAB = registerBlock("creep_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(CREEP_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DAWNWOOD_SLAB = registerBlock("dawnwood_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(DAWNWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTEDWOOD_SLAB = registerBlock("hauntedwood_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(HAUNTEDWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IROWOOD_SLAB = registerBlock("irowood_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(IROWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_SLAB = registerBlock("lucalus_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(LUCALUS_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_SLAB = registerBlock("lunide_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(LUNIDE_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_SLAB = registerBlock("runic_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(RUNIC_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHADOW_SLAB = registerBlock("shadow_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(SHADOW_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHYRE_SLAB = registerBlock("shyre_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(SHYRE_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD_SLAB = registerBlock("stranglewood_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(STRANGLEWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> TOXICWOOD_SLAB = registerBlock("toxicwood_slab", () -> new SlabBlock(AbstractBlock.Properties.copy(TOXICWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> ABYSSAL_STONE_STAIRS = registerBlock("abyssal_stone_stairs", () -> new StairsBlock(() -> ABYSSAL_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(ABYSSAL_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> AROMATIC_STONE_STAIRS = registerBlock("aromatic_stone_stairs", () -> new StairsBlock(() -> AROMATIC_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(AROMATIC_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARON_STONE_STAIRS = registerBlock("baron_stone_stairs", () -> new StairsBlock(() -> BARON_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(BARON_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BRIGHT_ROCK_STAIRS = registerBlock("bright_rock_stairs", () -> new StairsBlock(() -> BRIGHT_ROCK.get().defaultBlockState(), AbstractBlock.Properties.copy(BRIGHT_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_ROCK_STAIRS = registerBlock("coral_rock_stairs", () -> new StairsBlock(() -> CORAL_ROCK.get().defaultBlockState(), AbstractBlock.Properties.copy(CORAL_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_STONE_STAIRS = registerBlock("creep_stone_stairs", () -> new StairsBlock(() -> CREEP_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(CREEP_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLISED_ROCK_STAIRS = registerBlock("crystallised_rock_stairs", () -> new StairsBlock(() -> CRYSTALLISED_ROCK.get().defaultBlockState(), AbstractBlock.Properties.copy(CRYSTALLISED_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARKENED_ROCK_STAIRS = registerBlock("darkened_rock_stairs", () -> new StairsBlock(() -> DARKENED_ROCK.get().defaultBlockState(), AbstractBlock.Properties.copy(DARKENED_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DENSE_STONE_STAIRS = registerBlock("dense_stone_stairs", () -> new StairsBlock(() -> DENSE_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(DENSE_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> FUNGAL_ROCK_STAIRS = registerBlock("fungal_rock_stairs", () -> new StairsBlock(() -> FUNGAL_ROCK.get().defaultBlockState(), AbstractBlock.Properties.copy(FUNGAL_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_STONE_STAIRS = registerBlock("greckon_stone_stairs", () -> new StairsBlock(() -> GRECKON_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(GRECKON_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HELLSTONE_STAIRS = registerBlock("hellstone_stairs", () -> new StairsBlock(() -> HELLSTONE.get().defaultBlockState(), AbstractBlock.Properties.copy(HELLSTONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IROSTONE_STAIRS = registerBlock("irostone_stairs", () -> new StairsBlock(() -> IROSTONE.get().defaultBlockState(), AbstractBlock.Properties.copy(IROSTONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_STONE_STAIRS = registerBlock("lelyetian_stone_stairs", () -> new StairsBlock(() -> LELYETIAN_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(LELYETIAN_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> POLLUTED_STONE_STAIRS = registerBlock("polluted_stone_stairs", () -> new StairsBlock(() -> POLLUTED_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(POLLUTED_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_LOWER_ROCK_STAIRS = registerBlock("precasian_lower_rock_stairs", () -> new StairsBlock(() -> PRECASIAN_LOWER_ROCK.get().defaultBlockState(), AbstractBlock.Properties.copy(PRECASIAN_LOWER_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_SURFACE_ROCK_STAIRS = registerBlock("precasian_surface_rock_stairs", () -> new StairsBlock(() -> PRECASIAN_SURFACE_ROCK.get().defaultBlockState(), AbstractBlock.Properties.copy(PRECASIAN_SURFACE_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRESSED_CREEP_STONE_STAIRS = registerBlock("pressed_creep_stone_stairs", () -> new StairsBlock(() -> PRESSED_CREEP_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(PRESSED_CREEP_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRIMED_STONE_STAIRS = registerBlock("primed_stone_stairs", () -> new StairsBlock(() -> PRIMED_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(PRIMED_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_STONE_STAIRS = registerBlock("runic_stone_stairs", () -> new StairsBlock(() -> RUNIC_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(RUNIC_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WEIGHTLESS_STONE_STAIRS = registerBlock("weightless_stone_stairs", () -> new StairsBlock(() -> WEIGHTLESS_STONE.get().defaultBlockState(), AbstractBlock.Properties.copy(WEIGHTLESS_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARON_BRICKS_STAIRS = registerBlock("baron_bricks_stairs", () -> new StairsBlock(() -> BARON_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(BARON_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_MYSTERIUM_BRICKS_STAIRS = registerBlock("black_mysterium_bricks_stairs", () -> new StairsBlock(() -> BLACK_MYSTERIUM_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(BLACK_MYSTERIUM_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODSTONE_BRICKS_STAIRS = registerBlock("bloodstone_bricks_stairs", () -> new StairsBlock(() -> BLOODSTONE_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(BLOODSTONE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_BRICKS_STAIRS = registerBlock("coral_bricks_stairs", () -> new StairsBlock(() -> CORAL_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(CORAL_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEPONIA_BRICKS_STAIRS = registerBlock("creeponia_bricks_stairs", () -> new StairsBlock(() -> CREEPONIA_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(CREEPONIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLITE_BRICKS_STAIRS = registerBlock("crystallite_bricks_stairs", () -> new StairsBlock(() -> CRYSTALLITE_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(CRYSTALLITE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTEVIA_BRICKS_STAIRS = registerBlock("crystevia_bricks_stairs", () -> new StairsBlock(() -> CRYSTEVIA_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(CRYSTEVIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARKWASH_BRICKS_STAIRS = registerBlock("darkwash_bricks_stairs", () -> new StairsBlock(() -> DARKWASH_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(DARKWASH_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARK_BRICKS_STAIRS = registerBlock("dark_bricks_stairs", () -> new StairsBlock(() -> DARK_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(DARK_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GARDENCIA_BRICKS_STAIRS = registerBlock("gardencia_bricks_stairs", () -> new StairsBlock(() -> GARDENCIA_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(GARDENCIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_BRICKS_STAIRS = registerBlock("greckon_bricks_stairs", () -> new StairsBlock(() -> GRECKON_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(GRECKON_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_MYSTERIUM_BRICKS_STAIRS = registerBlock("green_mysterium_bricks_stairs", () -> new StairsBlock(() -> GREEN_MYSTERIUM_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(GREEN_MYSTERIUM_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_BRICKS_STAIRS = registerBlock("haunted_bricks_stairs", () -> new StairsBlock(() -> HAUNTED_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(HAUNTED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_DOTTED_BRICKS_STAIRS = registerBlock("iro_dotted_bricks_stairs", () -> new StairsBlock(() -> IRO_DOTTED_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(IRO_DOTTED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_STRIPED_BRICKS_STAIRS = registerBlock("iro_striped_bricks_stairs", () -> new StairsBlock(() -> IRO_STRIPED_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(IRO_STRIPED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_BRICKS_STAIRS = registerBlock("lelyetian_bricks_stairs", () -> new StairsBlock(() -> LELYETIAN_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(LELYETIAN_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_BRICKS_STAIRS = registerBlock("lunar_bricks_stairs", () -> new StairsBlock(() -> LUNAR_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(LUNAR_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ROSIDIAN_BRICKS_STAIRS = registerBlock("rosidian_bricks_stairs", () -> new StairsBlock(() -> ROSIDIAN_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(ROSIDIAN_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_CONSTRUCT_BRICKS_STAIRS = registerBlock("runic_construct_bricks_stairs", () -> new StairsBlock(() -> RUNIC_CONSTRUCT_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(RUNIC_CONSTRUCT_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SKELETAL_BRICKS_STAIRS = registerBlock("skeletal_bricks_stairs", () -> new StairsBlock(() -> SKELETAL_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(SKELETAL_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITEWASH_BRICKS_STAIRS = registerBlock("whitewash_bricks_stairs", () -> new StairsBlock(() -> WHITEWASH_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(WHITEWASH_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_SHYRE_BRICKS_STAIRS = registerBlock("white_shyre_bricks_stairs", () -> new StairsBlock(() -> WHITE_SHYRE_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(WHITE_SHYRE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_SHYRE_BRICKS_STAIRS = registerBlock("yellow_shyre_bricks_stairs", () -> new StairsBlock(() -> YELLOW_SHYRE_BRICKS.get().defaultBlockState(), AbstractBlock.Properties.copy(YELLOW_SHYRE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_AMETHYST_IVORY_STAIRS = registerBlock("intricate_amethyst_ivory_stairs", () -> new StairsBlock(() -> INTRICATE_AMETHYST_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(INTRICATE_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_IVORY_STAIRS = registerBlock("intricate_ivory_stairs", () -> new StairsBlock(() -> INTRICATE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(INTRICATE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_JADE_IVORY_STAIRS = registerBlock("intricate_jade_ivory_stairs", () -> new StairsBlock(() -> INTRICATE_JADE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(INTRICATE_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_LIMONITE_IVORY_STAIRS = registerBlock("intricate_limonite_ivory_stairs", () -> new StairsBlock(() -> INTRICATE_LIMONITE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(INTRICATE_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_ROSITE_IVORY_STAIRS = registerBlock("intricate_rosite_ivory_stairs", () -> new StairsBlock(() -> INTRICATE_ROSITE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(INTRICATE_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_SAPPHIRE_IVORY_STAIRS = registerBlock("intricate_sapphire_ivory_stairs", () -> new StairsBlock(() -> INTRICATE_SAPPHIRE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(INTRICATE_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_AMETHYST_IVORY_STAIRS = registerBlock("natural_amethyst_ivory_stairs", () -> new StairsBlock(() -> NATURAL_AMETHYST_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(NATURAL_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_IVORY_STAIRS = registerBlock("natural_ivory_stairs", () -> new StairsBlock(() -> NATURAL_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(NATURAL_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_JADE_IVORY_STAIRS = registerBlock("natural_jade_ivory_stairs", () -> new StairsBlock(() -> NATURAL_JADE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(NATURAL_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_LIMONITE_IVORY_STAIRS = registerBlock("natural_limonite_ivory_stairs", () -> new StairsBlock(() -> NATURAL_LIMONITE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(NATURAL_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_ROSITE_IVORY_STAIRS = registerBlock("natural_rosite_ivory_stairs", () -> new StairsBlock(() -> NATURAL_ROSITE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(NATURAL_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_SAPPHIRE_IVORY_STAIRS = registerBlock("natural_sapphire_ivory_stairs", () -> new StairsBlock(() -> NATURAL_SAPPHIRE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(NATURAL_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_AMETHYST_IVORY_STAIRS = registerBlock("ornate_amethyst_ivory_stairs", () -> new StairsBlock(() -> ORNATE_AMETHYST_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(ORNATE_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_IVORY_STAIRS = registerBlock("ornate_ivory_stairs", () -> new StairsBlock(() -> ORNATE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(ORNATE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_JADE_IVORY_STAIRS = registerBlock("ornate_jade_ivory_stairs", () -> new StairsBlock(() -> ORNATE_JADE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(ORNATE_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_LIMONITE_IVORY_STAIRS = registerBlock("ornate_limonite_ivory_stairs", () -> new StairsBlock(() -> ORNATE_LIMONITE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(ORNATE_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_ROSITE_IVORY_STAIRS = registerBlock("ornate_rosite_ivory_stairs", () -> new StairsBlock(() -> ORNATE_ROSITE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(ORNATE_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_SAPPHIRE_IVORY_STAIRS = registerBlock("ornate_sapphire_ivory_stairs", () -> new StairsBlock(() -> ORNATE_SAPPHIRE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(ORNATE_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_AMETHYST_IVORY_STAIRS = registerBlock("patterned_amethyst_ivory_stairs", () -> new StairsBlock(() -> PATTERNED_AMETHYST_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(PATTERNED_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_IVORY_STAIRS = registerBlock("patterned_ivory_stairs", () -> new StairsBlock(() -> PATTERNED_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(PATTERNED_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_JADE_IVORY_STAIRS = registerBlock("patterned_jade_ivory_stairs", () -> new StairsBlock(() -> PATTERNED_JADE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(PATTERNED_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_LIMONITE_IVORY_STAIRS = registerBlock("patterned_limonite_ivory_stairs", () -> new StairsBlock(() -> PATTERNED_LIMONITE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(PATTERNED_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_ROSITE_IVORY_STAIRS = registerBlock("patterned_rosite_ivory_stairs", () -> new StairsBlock(() -> PATTERNED_ROSITE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(PATTERNED_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_SAPPHIRE_IVORY_STAIRS = registerBlock("patterned_sapphire_ivory_stairs", () -> new StairsBlock(() -> PATTERNED_SAPPHIRE_IVORY.get().defaultBlockState(), AbstractBlock.Properties.copy(PATTERNED_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ACHONY_STAIRS = registerBlock("achony_stairs", () -> new StairsBlock(() -> ACHONY_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(ACHONY_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODWOOD_STAIRS = registerBlock("bloodwood_stairs", () -> new StairsBlock(() -> BLOODWOOD_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(BLOODWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CHURRY_STAIRS = registerBlock("churry_stairs", () -> new StairsBlock(() -> CHURRY_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(CHURRY_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_STAIRS = registerBlock("creep_stairs", () -> new StairsBlock(() -> CREEP_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(CREEP_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DAWNWOOD_STAIRS = registerBlock("dawnwood_stairs", () -> new StairsBlock(() -> DAWNWOOD_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(DAWNWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTEDWOOD_STAIRS = registerBlock("hauntedwood_stairs", () -> new StairsBlock(() -> HAUNTEDWOOD_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(HAUNTEDWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IROWOOD_STAIRS = registerBlock("irowood_stairs", () -> new StairsBlock(() -> IROWOOD_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(IROWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_STAIRS = registerBlock("lucalus_stairs", () -> new StairsBlock(() -> LUCALUS_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(LUCALUS_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_STAIRS = registerBlock("lunide_stairs", () -> new StairsBlock(() -> LUNIDE_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(LUNIDE_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_STAIRS = registerBlock("runic_stairs", () -> new StairsBlock(() -> RUNIC_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(RUNIC_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHADOW_STAIRS = registerBlock("shadow_stairs", () -> new StairsBlock(() -> SHADOW_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(SHADOW_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHYRE_STAIRS = registerBlock("shyre_stairs", () -> new StairsBlock(() -> SHYRE_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(SHYRE_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD_STAIRS = registerBlock("stranglewood_stairs", () -> new StairsBlock(() -> STRANGLEWOOD_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(STRANGLEWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> TOXICWOOD_STAIRS = registerBlock("toxicwood_stairs", () -> new StairsBlock(() -> TOXICWOOD_PLANKS.get().defaultBlockState(), AbstractBlock.Properties.copy(TOXICWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> ABYSSAL_STONE_WALL = registerBlock("abyssal_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(ABYSSAL_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> AROMATIC_STONE_WALL = registerBlock("aromatic_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(AROMATIC_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARON_STONE_WALL = registerBlock("baron_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(BARON_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BRIGHT_ROCK_WALL = registerBlock("bright_rock_wall", () -> new WallBlock(AbstractBlock.Properties.copy(BRIGHT_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_ROCK_WALL = registerBlock("coral_rock_wall", () -> new WallBlock(AbstractBlock.Properties.copy(CORAL_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_STONE_WALL = registerBlock("creep_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(CREEP_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLISED_ROCK_WALL = registerBlock("crystallised_rock_wall", () -> new WallBlock(AbstractBlock.Properties.copy(CRYSTALLISED_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARKENED_ROCK_WALL = registerBlock("darkened_rock_wall", () -> new WallBlock(AbstractBlock.Properties.copy(DARKENED_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DENSE_STONE_WALL = registerBlock("dense_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(DENSE_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> FUNGAL_ROCK_WALL = registerBlock("fungal_rock_wall", () -> new WallBlock(AbstractBlock.Properties.copy(FUNGAL_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HELLSTONE_WALL = registerBlock("hellstone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(HELLSTONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IROSTONE_WALL = registerBlock("irostone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(IROSTONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_STONE_WALL = registerBlock("lelyetian_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(LELYETIAN_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> POLLUTED_STONE_WALL = registerBlock("polluted_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(POLLUTED_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_LOWER_ROCK_WALL = registerBlock("precasian_lower_rock_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PRECASIAN_LOWER_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRECASIAN_SURFACE_ROCK_WALL = registerBlock("precasian_surface_rock_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PRECASIAN_SURFACE_ROCK.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRESSED_CREEP_STONE_WALL = registerBlock("pressed_creep_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PRESSED_CREEP_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PRIMED_STONE_WALL = registerBlock("primed_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PRIMED_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_STONE_WALL = registerBlock("runic_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(RUNIC_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WEIGHTLESS_STONE_WALL = registerBlock("weightless_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(WEIGHTLESS_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARON_BRICKS_WALL = registerBlock("baron_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(BARON_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_MYSTERIUM_BRICKS_WALL = registerBlock("black_mysterium_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(BLACK_MYSTERIUM_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODSTONE_BRICKS_WALL = registerBlock("bloodstone_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(BLOODSTONE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CORAL_BRICKS_WALL = registerBlock("coral_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(CORAL_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEPONIA_BRICKS_WALL = registerBlock("creeponia_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(CREEPONIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLITE_BRICKS_WALL = registerBlock("crystallite_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(CRYSTALLITE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTEVIA_BRICKS_WALL = registerBlock("crystevia_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(CRYSTEVIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARKWASH_BRICKS_WALL = registerBlock("darkwash_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(DARKWASH_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DARK_BRICKS_WALL = registerBlock("dark_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(DARK_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GARDENCIA_BRICKS_WALL = registerBlock("gardencia_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(GARDENCIA_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_BRICKS_WALL = registerBlock("greckon_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(GRECKON_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GRECKON_STONE_WALL = registerBlock("greckon_stone_wall", () -> new WallBlock(AbstractBlock.Properties.copy(GRECKON_STONE.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_MYSTERIUM_BRICKS_WALL = registerBlock("green_mysterium_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(GREEN_MYSTERIUM_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTED_BRICKS_WALL = registerBlock("haunted_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(HAUNTED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_DOTTED_BRICKS_WALL = registerBlock("iro_dotted_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(IRO_DOTTED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_STRIPED_BRICKS_WALL = registerBlock("iro_striped_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(IRO_STRIPED_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LELYETIAN_BRICKS_WALL = registerBlock("lelyetian_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(LELYETIAN_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_BRICKS_WALL = registerBlock("lunar_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(LUNAR_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ROSIDIAN_BRICKS_WALL = registerBlock("rosidian_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(ROSIDIAN_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_CONSTRUCT_BRICKS_WALL = registerBlock("runic_construct_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(RUNIC_CONSTRUCT_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SKELETAL_BRICKS_WALL = registerBlock("skeletal_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(SKELETAL_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITEWASH_BRICKS_WALL = registerBlock("whitewash_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(WHITEWASH_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_SHYRE_BRICKS_WALL = registerBlock("white_shyre_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(WHITE_SHYRE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_SHYRE_BRICKS_WALL = registerBlock("yellow_shyre_bricks_wall", () -> new WallBlock(AbstractBlock.Properties.copy(YELLOW_SHYRE_BRICKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_AMETHYST_IVORY_WALL = registerBlock("intricate_amethyst_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(INTRICATE_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_IVORY_WALL = registerBlock("intricate_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(INTRICATE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_JADE_IVORY_WALL = registerBlock("intricate_jade_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(INTRICATE_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_LIMONITE_IVORY_WALL = registerBlock("intricate_limonite_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(INTRICATE_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_ROSITE_IVORY_WALL = registerBlock("intricate_rosite_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(INTRICATE_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> INTRICATE_SAPPHIRE_IVORY_WALL = registerBlock("intricate_sapphire_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(INTRICATE_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_AMETHYST_IVORY_WALL = registerBlock("natural_amethyst_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(NATURAL_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_IVORY_WALL = registerBlock("natural_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(NATURAL_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_JADE_IVORY_WALL = registerBlock("natural_jade_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(NATURAL_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_LIMONITE_IVORY_WALL = registerBlock("natural_limonite_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(NATURAL_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_ROSITE_IVORY_WALL = registerBlock("natural_rosite_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(NATURAL_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> NATURAL_SAPPHIRE_IVORY_WALL = registerBlock("natural_sapphire_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(NATURAL_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_AMETHYST_IVORY_WALL = registerBlock("ornate_amethyst_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(ORNATE_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_IVORY_WALL = registerBlock("ornate_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(ORNATE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_JADE_IVORY_WALL = registerBlock("ornate_jade_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(ORNATE_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_LIMONITE_IVORY_WALL = registerBlock("ornate_limonite_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(ORNATE_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_ROSITE_IVORY_WALL = registerBlock("ornate_rosite_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(ORNATE_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNATE_SAPPHIRE_IVORY_WALL = registerBlock("ornate_sapphire_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(ORNATE_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_AMETHYST_IVORY_WALL = registerBlock("patterned_amethyst_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PATTERNED_AMETHYST_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_IVORY_WALL = registerBlock("patterned_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PATTERNED_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_JADE_IVORY_WALL = registerBlock("patterned_jade_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PATTERNED_JADE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_LIMONITE_IVORY_WALL = registerBlock("patterned_limonite_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PATTERNED_LIMONITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_ROSITE_IVORY_WALL = registerBlock("patterned_rosite_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PATTERNED_ROSITE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> PATTERNED_SAPPHIRE_IVORY_WALL = registerBlock("patterned_sapphire_ivory_wall", () -> new WallBlock(AbstractBlock.Properties.copy(PATTERNED_SAPPHIRE_IVORY.get())), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> ACHONY_FENCE = registerBlock("achony_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(ACHONY_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODWOOD_FENCE = registerBlock("bloodwood_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(BLOODWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CHURRY_FENCE = registerBlock("churry_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(CHURRY_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_FENCE = registerBlock("creep_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(CREEP_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DAWNWOOD_FENCE = registerBlock("dawnwood_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(DAWNWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTEDWOOD_FENCE = registerBlock("hauntedwood_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(HAUNTEDWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IROWOOD_FENCE = registerBlock("irowood_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(IROWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_FENCE = registerBlock("lucalus_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(LUCALUS_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_FENCE = registerBlock("lunide_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(LUNIDE_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_FENCE = registerBlock("runic_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(RUNIC_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHADOW_FENCE = registerBlock("shadow_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(SHADOW_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHYRE_FENCE = registerBlock("shyre_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(SHYRE_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD_FENCE = registerBlock("stranglewood_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(STRANGLEWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> TOXICWOOD_FENCE = registerBlock("toxicwood_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(TOXICWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> TWINKLESTONE_FENCE = registerBlock("twinklestone_fence", () -> new FenceBlock(AbstractBlock.Properties.copy(TWINKLESTONE.get())), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> ACHONY_FENCE_GATE = registerBlock("achony_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(ACHONY_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODWOOD_FENCE_GATE = registerBlock("bloodwood_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(BLOODWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CHURRY_FENCE_GATE = registerBlock("churry_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(CHURRY_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CREEP_FENCE_GATE = registerBlock("creep_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(CREEP_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DAWNWOOD_FENCE_GATE = registerBlock("dawnwood_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(DAWNWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> HAUNTEDWOOD_FENCE_GATE = registerBlock("hauntedwood_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(HAUNTEDWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IROWOOD_FENCE_GATE = registerBlock("irowood_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(IROWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_FENCE_GATE = registerBlock("lucalus_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(LUCALUS_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_FENCE_GATE = registerBlock("lunide_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(LUNIDE_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> RUNIC_FENCE_GATE = registerBlock("runic_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(RUNIC_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHADOW_FENCE_GATE = registerBlock("shadow_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(SHADOW_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHYRE_FENCE_GATE = registerBlock("shyre_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(SHYRE_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD_FENCE_GATE = registerBlock("stranglewood_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(STRANGLEWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> TOXICWOOD_FENCE_GATE = registerBlock("toxicwood_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(TOXICWOOD_PLANKS.get())), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> TWINKLESTONE_FENCE_GATE = registerBlock("twinklestone_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.copy(TWINKLESTONE.get())), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> AMETHYST_BLOCK = registerBlock("amethyst_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARONYTE_BLOCK = registerBlock("baronyte_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLAZIUM_BLOCK = registerBlock("blazium_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODSTONE_BLOCK = registerBlock("bloodstone_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> CRYSTALLITE_BLOCK = registerBlock("crystallite_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ELECANIUM_BLOCK = registerBlock("elecanium_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> EMBERSTONE_BLOCK = registerBlock("emberstone_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GEMENYTE_BLOCK = registerBlock("gemenyte_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GHASTLY_BLOCK = registerBlock("ghastly_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GHOULISH_BLOCK = registerBlock("ghoulish_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> JADE_BLOCK = registerBlock("jade_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> JEWELYTE_BLOCK = registerBlock("jewelyte_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LIMONITE_BLOCK = registerBlock("limonite_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_BLOCK = registerBlock("lunar_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LYON_BLOCK = registerBlock("lyon_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> MYSTITE_BLOCK = registerBlock("mystite_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ORNAMYTE_BLOCK = registerBlock("ornamyte_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> ROSITE_BLOCK = registerBlock("rosite_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SAPPHIRE_BLOCK = registerBlock("sapphire_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHYREGEM_BLOCK = registerBlock("shyregem_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SHYRESTONE_BLOCK = registerBlock("shyrestone_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> SKELETAL_INGOT_BLOCK = registerBlock("skeletal_ingot_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> VARSIUM_BLOCK = registerBlock("varsium_block", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5f, 6f).get()), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> BARON_CARPET = registerBlock("baron_carpet", () -> new CarpetBlock(MaterialColor.COLOR_RED), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BOREAN_CARPET = registerBlock("borean_carpet", () -> new CarpetBlock(MaterialColor.COLOR_RED), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GARDENCIAN_CARPET = registerBlock("gardencian_carpet", () -> new CarpetBlock(MaterialColor.COLOR_RED), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> IRO_CARPET = registerBlock("iro_carpet", () -> new CarpetBlock(MaterialColor.COLOR_RED), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_CARPET = registerBlock("lunar_carpet", () -> new CarpetBlock(MaterialColor.COLOR_RED), AoAItemGroups.DECORATION_BLOCKS);

	public static final RegistryObject<Block> ACHONY_PRESSURE_PLATE = registerBlock("achony_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> BLOODWOOD_PRESSURE_PLATE = registerBlock("bloodwood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CHURRY_PRESSURE_PLATE = registerBlock("churry_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CREEP_PRESSURE_PLATE = registerBlock("creep_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DAWNWOOD_PRESSURE_PLATE = registerBlock("dawnwood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> HAUNTEDWOOD_PRESSURE_PLATE = registerBlock("hauntedwood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> IROWOOD_PRESSURE_PLATE = registerBlock("irowood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_PRESSURE_PLATE = registerBlock("lucalus_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_PRESSURE_PLATE = registerBlock("lunide_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> RUNIC_PRESSURE_PLATE = registerBlock("runic_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> SHADOW_PRESSURE_PLATE = registerBlock("shadow_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> SHYRE_PRESSURE_PLATE = registerBlock("shyre_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD_PRESSURE_PLATE = registerBlock("stranglewood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> TOXICWOOD_PRESSURE_PLATE = registerBlock("toxicwood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, new CompactProperties(Material.WOOD, MaterialColor.COLOR_BROWN).stats(0.5f).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);

	public static final RegistryObject<Block> ACHONY_BUTTON = registerBlock("achony_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> BLOODWOOD_BUTTON = registerBlock("bloodwood_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CHURRY_BUTTON = registerBlock("churry_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CREEP_BUTTON = registerBlock("creep_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DAWNWOOD_BUTTON = registerBlock("dawnwood_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> HAUNTEDWOOD_BUTTON = registerBlock("hauntedwood_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> IROWOOD_BUTTON = registerBlock("irowood_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> LUCALUS_BUTTON = registerBlock("lucalus_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> LUNIDE_BUTTON = registerBlock("lunide_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> RUNIC_BUTTON = registerBlock("runic_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> SHADOW_BUTTON = registerBlock("shadow_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> SHYRE_BUTTON = registerBlock("shyre_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> STRANGLEWOOD_BUTTON = registerBlock("stranglewood_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> TOXICWOOD_BUTTON = registerBlock("toxicwood_button", () -> new WoodButtonBlock(new CompactProperties(Material.DECORATION, MaterialColor.COLOR_BROWN).stats(0.5f).sound(SoundType.WOOD).noClip().get()), AoAItemGroups.FUNCTIONAL_BLOCKS);

	public static final RegistryObject<Block> KAIYU_TEMPLE_BLOCK_FACE = registerBlock("kaiyu_temple_block_face", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_BLOCK_FLOW = registerBlock("kaiyu_temple_block_flow", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_BLOCK_MAZE = registerBlock("kaiyu_temple_block_maze", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_BLOCK_PASS = registerBlock("kaiyu_temple_block_pass", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_BLOCK_PLAIN = registerBlock("kaiyu_temple_block_plain", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_BLOCK_SQUARES = registerBlock("kaiyu_temple_block_squares", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_BLOCK_TRACK = registerBlock("kaiyu_temple_block_track", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_PETALS = registerBlock("black_petals", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLUE_PETALS = registerBlock("blue_petals", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LIGHT_BLUE_PETALS = registerBlock("light_blue_petals", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> MAGENTA_PETALS = registerBlock("magenta_petals", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PURPLE_PETALS = registerBlock("purple_petals", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> RED_PETALS = registerBlock("red_petals", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ROSE_PETALS = registerBlock("rose_petals", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_PETALS = registerBlock("yellow_petals", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PLASTIC = registerBlock("plastic", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLUE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_ANCIENT_TILE = registerBlock("black_ancient_tile", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ANCIENT_TILE_CORE = registerBlock("ancient_tile_core", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_ANCIENT_TILE = registerBlock("green_ancient_tile", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ANCIENT_TILE_SHRINE = registerBlock("ancient_tile_shrine", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_ANCIENT_TILE = registerBlock("white_ancient_tile", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ARCHAIC_DIRT = registerBlock("archaic_dirt", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ARCHAIC_STREAM_HORIZONTAL = registerBlock("archaic_stream_horizontal", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(2.0f, 10.0f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ARCHAIC_RECTANGLES = registerBlock("archaic_rectangles", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(2.0f, 10.0f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ARCHAIC_SQUARES = registerBlock("archaic_squares", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(2.0f, 10.0f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ARCHAIC_TILES = registerBlock("archaic_tiles", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(2.0f, 10.0f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ARCHAIC_STREAM_VERTICAL = registerBlock("archaic_stream_vertical", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(2.0f, 10.0f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ANCIENT_ROCK = registerBlock("ancient_rock", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BARON_CASTLE_WALL = registerBlock("baron_castle_wall", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARON_CUBE = registerBlock("baron_cube", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BARON_GROUND = registerBlock("baron_ground", () -> new Block(new CompactProperties(Material.CLAY, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLOODSTONE_BAR_BRICKS = registerBlock("bloodstone_bar_bricks", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(7.5f, 7f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLOODSTONE_BARS = registerBlock("bloodstone_bars", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(7.5f, 7f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BONEY_BLOCK = customRender(registerBlock("boney_block", BoneyBlock::new, AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> GREEN_CANDY = registerBlock("green_candy", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> RED_CANDY = registerBlock("red_candy", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_CANDY = registerBlock("white_candy", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CHOCOLATE_BLOCK = registerBlock("chocolate_block", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> DARK_CHOCOLATE_BLOCK = registerBlock("dark_chocolate_block", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_CHOCOLATE_BLOCK = registerBlock("white_chocolate_block", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> COG_BLOCK = registerBlock("cog_block", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLUE_CORAL = registerBlock("blue_coral", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_CORAL = registerBlock("green_coral", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ORANGE_CORAL = registerBlock("orange_coral", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PINK_CORAL = registerBlock("pink_coral", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WHITE_CORAL = registerBlock("white_coral", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_CORAL = registerBlock("yellow_coral", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> AQUA_COTTON_CANDY = registerBlock("aqua_cotton_candy", () -> new CustomToolsBlock(new CompactProperties(Material.WOOL, MaterialColor.COLOR_RED).stats(0.4f, 0f).get(), "sword", "shears"), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PINK_COTTON_CANDY = registerBlock("pink_cotton_candy", () -> new CustomToolsBlock(new CompactProperties(Material.WOOL, MaterialColor.COLOR_RED).stats(0.4f, 0f).get(), "sword", "shears"), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CRATE = registerBlock("crate", () -> new Block(new CompactProperties(Material.WOOD, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> BLUE_CRYSTAL_BLOCK = customRender(registerBlock("blue_crystal_block", () -> new BreakableBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(1f, 0f).noOcclusion().get()), AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> GREEN_CRYSTAL_BLOCK = customRender(registerBlock("green_crystal_block", () -> new BreakableBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(1f, 0f).noOcclusion().get()), AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> PURPLE_CRYSTAL_BLOCK = customRender(registerBlock("purple_crystal_block", () -> new BreakableBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(1f, 0f).noOcclusion().get()), AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> RED_CRYSTAL_BLOCK = customRender(registerBlock("red_crystal_block", () -> new BreakableBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(1f, 0f).noOcclusion().get()), AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> WHITE_CRYSTAL_BLOCK = customRender(registerBlock("white_crystal_block", () -> new BreakableBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(1f, 0f).noOcclusion().get()), AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> YELLOW_CRYSTAL_BLOCK = customRender(registerBlock("yellow_crystal_block", () -> new BreakableBlock(new CompactProperties(Material.GLASS, MaterialColor.COLOR_RED).stats(1f, 0f).noOcclusion().get()), AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> DARK_FACE_BRICK = registerBlock("dark_face_brick", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> DEGRADED_STEEL = registerBlock("degraded_steel", () -> new Block(new CompactProperties(Material.METAL, MaterialColor.COLOR_RED).stats(5.0f, 10.0f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> EYE_BLOCK = registerBlock("eye_block", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_RED).stats(4.0f, 1.5f).get()), AoAItemGroups.DECORATION_BLOCKS);
	public static final RegistryObject<Block> GINGERBREAD = registerBlock("gingerbread", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> HIVE_WALL = registerBlock("hive_wall", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_RED).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> FLOWER_CORE = registerBlock("flower_core", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_GREEN).stats(1f, 0f).tool(ToolType.AXE).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> GIANT_PLANT_STEM = registerBlock("giant_plant_stem", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_MUSHROOM_STEM = registerBlock("black_mushroom_stem", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLUE_MUSHROOM_STEM = registerBlock("blue_mushroom_stem", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_MUSHROOM_STEM = registerBlock("green_mushroom_stem", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ORANGE_MUSHROOM_STEM = registerBlock("orange_mushroom_stem", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PURPLE_MUSHROOM_STEM = registerBlock("purple_mushroom_stem", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_MUSHROOM_STEM = registerBlock("yellow_mushroom_stem", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLACK_MUSHROOM_BLOCK = registerBlock("black_mushroom_block", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLUE_MUSHROOM_BLOCK = registerBlock("blue_mushroom_block", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> GREEN_MUSHROOM_BLOCK = registerBlock("green_mushroom_block", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ORANGE_MUSHROOM_BLOCK = registerBlock("orange_mushroom_block", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PURPLE_MUSHROOM_BLOCK = registerBlock("purple_mushroom_block", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> YELLOW_MUSHROOM_BLOCK = registerBlock("yellow_mushroom_block", () -> new HugeMushroomBlock(new BlockUtil.CompactProperties(Material.WOOD, MaterialColor.TERRACOTTA_ORANGE).stats(0.2f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> SKELETAL_BLOCK = registerBlock("skeletal_block", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_WHITE).stats(5f, 5f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TENTACLE = registerBlock("tentacle", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_RED).stats(3f, 1f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TENTACLE_DOTS_LEFT = registerBlock("tentacle_dots_left", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_RED).stats(3f, 1f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TENTACLE_DOTS_RIGHT = registerBlock("tentacle_dots_right", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_RED).stats(3f, 1f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TENTACLE_EYE_ORANGE = registerBlock("tentacle_eye_orange", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_RED).stats(3f, 1f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TENTACLE_EYE_RED = registerBlock("tentacle_eye_red", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_RED).stats(3f, 1f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TENTACLE_GREEN = registerBlock("tentacle_green", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_RED).stats(3f, 1f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TOXIC_STEM = registerBlock("toxic_stem", () -> new Block(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_RED).stats(3f, 1f).sound(SoundType.STEM).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> PARAVITE_HIVE = registerBlock("paravite_hive", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_ORANGE).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> IROPOLE = customRender(registerBlock("iropole", Iropole::new, AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RUNIC_BRICKS = registerBlock("runic_bricks", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.GOLD).stats(10f, 15f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> BLUE_SHROOM = customRender(registerBlock("blue_shroom", () -> new ShroomTop(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_BLUE).stats(2, 0.5f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> GREEN_SHROOM = customRender(registerBlock("green_shroom", () -> new ShroomTop(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_GREEN).stats(2, 0.5f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> ORANGE_SHROOM = customRender(registerBlock("orange_shroom", () -> new ShroomTop(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_ORANGE).stats(2, 0.5f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PURPLE_SHROOM = customRender(registerBlock("purple_shroom", () -> new ShroomTop(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_PURPLE).stats(2, 0.5f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> VOX_SHROOM = customRender(registerBlock("vox_shroom", () -> new ShroomTop(new CompactProperties(Material.VEGETABLE, MaterialColor.TERRACOTTA_GREEN).stats(2, 0.5f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_SHROOM = customRender(registerBlock("yellow_shroom", () -> new ShroomTop(new CompactProperties(Material.VEGETABLE, MaterialColor.COLOR_YELLOW).stats(2, 0.5f).sound(SoundType.WOOD).get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> SHROOM_STEM = customRender(registerBlock("shroom_stem", ShroomStem::new, AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> VOX_LOG = customRender(registerBlock("vox_log", VoxLog::new, AoAItemGroups.GENERATION_BLOCKS, 300), CUTOUT);
	public static final RegistryObject<Block> CELEVE_STEM = registerBlock("celeve_stem", () -> new LogBlock(MaterialColor.TERRACOTTA_WHITE, MaterialColor.TERRACOTTA_WHITE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_PILLAR = customRender(registerBlock("lunar_pillar", () -> new NonFullBlock(VoxelShapes.box(0.0625, 0, 0.0625, 0.9375, 1, 0.9375), new CompactProperties(Material.STONE, MaterialColor.COLOR_PURPLE).stats(1.5f, 10f).noOcclusion().get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> SPIKEY_PILLAR = customRender(registerBlock("spikey_pillar", () -> new NonFullBlock(VoxelShapes.box(0.1875, 0, 0.1875, 0.8125, 1, 0.8125), new CompactProperties(Material.STONE, MaterialColor.COLOR_PURPLE).stats(1.5f, 10f).noOcclusion().get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT_MIPPED);
	public static final RegistryObject<Block> TOXIC_BLOCK = registerBlock("toxic_block", ToxicBlock::new, AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> TOXIC_WASTE = registerBlock("toxic_waste", ToxicWaste::new, AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> SHYRE_CLOUD = customRender(registerBlock("shyre_cloud", CloudBlock::new, AoAItemGroups.GENERATION_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> SHYRE_CRUST = registerBlock("shyre_crust", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.GOLD).stats(45f, 1000f).harvestTool(ToolType.PICKAXE).get()), AoAItemGroups.GENERATION_BLOCKS);

	public static final RegistryObject<Block> GIANT_SNAIL_ACID = registerItemlessBlock("giant_snail_acid", GiantSnailAcid::new);
	public static final RegistryObject<Block> ORANGE_ACID = registerItemlessBlock("orange_acid", AcidBlock::new);

	public static final RegistryObject<FlowingFluidBlock> CANDIED_WATER = customRender(BlockUtil.createFluidBlock("candied_water", Material.WATER, NumberUtil.alpha(NumberUtil.RGB(255, 105, 180), 200), 1200, 1200), TRANSLUCENT);
	public static final RegistryObject<FlowingFluidBlock> CLEAR_WATER = customRender(BlockUtil.createFluidBlock("clear_water", Material.WATER, NumberUtil.alpha(NumberUtil.RGB(63, 118, 228), 255), 1000, 1000, (supplier, properties) -> () -> new ClearWater(supplier, properties)), TRANSLUCENT);

	public static final RegistryObject<Block> KAIYU_TEMPLE_TRAP_WITHER = registerBlock("kaiyu_temple_trap_wither", KaiyuTempleTrapWither::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_TRAP_DAMAGE = registerBlock("kaiyu_temple_trap_damage", KaiyuTempleTrapDamage::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_TRAP_POISON = registerBlock("kaiyu_temple_trap_poison", KaiyuTempleTrapPoison::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> KAIYU_TEMPLE_TRAP_FIRE = registerBlock("kaiyu_temple_trap_fire", KaiyuTempleTrapFire::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DARKLIGHT_ORB = registerBlock("darklight_orb", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(1.5f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DUSK_ORB = registerBlock("dusk_orb", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(1.5f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> LUNAR_ORB = registerBlock("lunar_orb", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(1.5f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> MOONLIGHT_ORB = registerBlock("moonlight_orb", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(1.5f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> SUNFIRE_ORB = registerBlock("sunfire_orb", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(1.5f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> LUNAR_PAD = registerBlock("lunar_pad", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(1.5f, 10f).get()), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> COMPASS_RUNE_POST = registerBlock("compass_rune_post", () -> new RunePostBlock(63, 45, AoAItems.COMPASS_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> DISTORTION_RUNE_POST = registerBlock("distortion_rune_post", () -> new RunePostBlock(65, 50, AoAItems.DISTORTION_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> ENERGY_RUNE_POST = registerBlock("energy_rune_post", () -> new RunePostBlock(36, 22, AoAItems.ENERGY_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> FIRE_RUNE_POST = registerBlock("fire_rune_post", () -> new RunePostBlock(8, 7, AoAItems.FIRE_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> KINETIC_RUNE_POST = registerBlock("kinetic_rune_post", () -> new RunePostBlock(54, 32, AoAItems.KINETIC_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LIFE_RUNE_POST = registerBlock("life_rune_post", () -> new RunePostBlock(72, 56, AoAItems.LIFE_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> LUNAR_RUNE_POST = registerBlock("lunar_rune_post", () -> new RunePostBlock(32, 20, AoAItems.LUNAR_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> POISON_RUNE_POST = registerBlock("poison_rune_post", () -> new RunePostBlock(22, 14, AoAItems.POISON_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> POWER_RUNE_POST = registerBlock("power_rune_post", () -> new RunePostBlock(59, 40, AoAItems.POWER_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STORM_RUNE_POST = registerBlock("storm_rune_post", () -> new RunePostBlock(49, 30, AoAItems.STORM_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> STRIKE_RUNE_POST = registerBlock("strike_rune_post", () -> new RunePostBlock(42, 24, AoAItems.STRIKE_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WATER_RUNE_POST = registerBlock("water_rune_post", () -> new RunePostBlock(15, 10, AoAItems.WATER_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WIND_RUNE_POST = registerBlock("wind_rune_post", () -> new RunePostBlock(0, 4, AoAItems.WIND_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> WITHER_RUNE_POST = registerBlock("wither_rune_post", () -> new RunePostBlock(30, 15, AoAItems.WITHER_RUNE), AoAItemGroups.GENERATION_BLOCKS);
	public static final RegistryObject<Block> CARVED_RUNE_OF_DIRECTION = registerBlock("carved_rune_of_direction", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(3f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CARVED_RUNE_OF_POWER = registerBlock("carved_rune_of_power", CarvedRuneOfPower::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CARVED_RUNE_OF_REALITY = registerBlock("carved_rune_of_reality", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(3f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CARVED_RUNE_OF_SPACE = registerBlock("carved_rune_of_space", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(3f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CARVED_RUNE_OF_TRAVEL = registerBlock("carved_rune_of_travel", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.COLOR_BLACK).stats(3f, 10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CHARGING_TABLE = customRender(registerBlock("charging_table", ChargingTable::new, AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DIMENSIONAL_FABRIC = registerItemlessBlock("dimensional_fabric", DimensionalFabric::new);
	public static final RegistryObject<Block> AIR_GAP = registerItemlessBlock("air_gap", AirGap::new);
	public static final RegistryObject<Block> DUSTOPIAN_LAMP = registerBlock("dustopian_lamp", DustopianLamp::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DAMAGE_ENHANCER = registerBlock("damage_enhancer", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DIVINE_ENHANCER = registerBlock("divine_enhancer", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DURABILITY_ENHANCER = registerBlock("durability_enhancer", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> LUCK_ENHANCER = registerBlock("luck_enhancer", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> MAGIC_ENHANCER = registerBlock("magic_enhancer", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> RESISTANCE_ENHANCER = registerBlock("resistance_enhancer", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> SPEED_ENHANCER = registerBlock("speed_enhancer", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> WEIGHT_ENHANCER = registerBlock("weight_enhancer", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_GRAY).stats(10f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> ARCHAIC_LADDER = customRender(registerBlock("archaic_ladder", () -> new LadderBlock(new CompactProperties(Material.DECORATION, MaterialColor.TERRACOTTA_BROWN).stats(1f, 0.5f).sound(SoundType.LADDER).noOcclusion().get()), AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);

	public static final RegistryObject<Block> ARMY_BLOCK = registerBlock("army_block", ArmyBlock::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> BARONESS_ALTAR = registerBlock("baroness_altar", BaronessAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CLUNKHEAD_ALTAR = registerBlock("clunkhead_altar", ClunkheadAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CRAEXXEUS_ALTAR = registerBlock("craexxeus_altar", CraexxeusAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CREEP_ALTAR = registerBlock("creep_altar", CreepAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DRACYON_ALTAR = registerBlock("dracyon_altar", DracyonAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> GRAW_ALTAR = registerBlock("graw_altar", GrawAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> GUARDIAN_ALTAR = registerBlock("guardian_altar", GuardianAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> HIVE_SPAWNER = registerBlock("hive_spawner", HiveSpawner::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> ILLUSION_ALTAR = registerBlock("illusion_altar", IllusionAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> KROR_ALTAR = registerBlock("kror_altar", KrorAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> MECHBOT_ALTAR = registerBlock("mechbot_altar", MechBotAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> POWER_STATION = registerBlock("power_station", PowerStation::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> PRIMORDIAL_SHRINE = registerBlock("primordial_shrine", PrimordialShrine::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> SHADOW_ALTAR = registerBlock("shadow_altar", ShadowAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> VINOCORNE_SHRINE = registerBlock("vinocorne_shrine", VinocorneShrine::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> VOXXULON_ALTAR = registerBlock("voxxulon_altar", VoxxulonAltar::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	
	public static final RegistryObject<Block> ABYSS_PORTAL =  customRender(registerBlock("abyss_portal", () -> new PortalBlock(AoADimensions.ABYSS.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(229, 0, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> BARATHOS_PORTAL = customRender(registerBlock("barathos_portal", () -> new PortalBlock(AoADimensions.BARATHOS.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(239, 137, 119)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> CANDYLAND_PORTAL = customRender(registerBlock("candyland_portal", () -> new PortalBlock(AoADimensions.CANDYLAND.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(255, 232, 232)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> CELEVE_PORTAL = customRender(registerBlock("celeve_portal", () -> new PortalBlock(AoADimensions.CELEVE.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(247, 239, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> CREEPONIA_PORTAL = customRender(registerBlock("creeponia_portal", () -> new PortalBlock(AoADimensions.CREEPONIA.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(132, 188, 124)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> CRYSTEVIA_PORTAL = customRender(registerBlock("crystevia_portal", () -> new PortalBlock(AoADimensions.CRYSTEVIA.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(194, 73, 255)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> DEEPLANDS_PORTAL = customRender(registerBlock("deeplands_portal", () -> new PortalBlock(AoADimensions.DEEPLANDS.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(181, 181, 181)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> DUSTOPIA_PORTAL = customRender(registerBlock("dustopia_portal", () -> new PortalBlock(AoADimensions.DUSTOPIA.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(0, 0, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> GARDENCIA_PORTAL = customRender(registerBlock("gardencia_portal", () -> new PortalBlock(AoADimensions.GARDENCIA.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(255, 0, 114)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> GRECKON_PORTAL = customRender(registerBlock("greckon_portal", () -> new PortalBlock(AoADimensions.GRECKON.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(130, 178, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> HAVEN_PORTAL = customRender(registerBlock("haven_portal", () -> new PortalBlock(AoADimensions.HAVEN.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(0, 229, 237)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> IROMINE_PORTAL = customRender(registerBlock("iromine_portal", () -> new PortalBlock(AoADimensions.IROMINE.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(232, 208, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> LBOREAN_PORTAL = customRender(registerBlock("lborean_portal", () -> new PortalBlock(AoADimensions.LBOREAN.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(0, 173, 216)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> LELYETIA_PORTAL = customRender(registerBlock("lelyetia_portal", () -> new PortalBlock(AoADimensions.LELYETIA.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(221, 103, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> LUNALUS_PORTAL = customRender(registerBlock("lunalus_portal", () -> new PortalBlock(AoADimensions.LUNALUS.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(255, 226, 251)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> MYSTERIUM_PORTAL = customRender(registerBlock("mysterium_portal", () -> new PortalBlock(AoADimensions.MYSTERIUM.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(107, 0, 82)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> NETHER_PORTAL = customRender(registerBlock("nether_portal", () -> new PortalBlock(World.NETHER, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(193, 64, 215)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> NOWHERE_PORTAL = customRender(registerBlock("nowhere_portal", NowherePortalBlock::new, AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> PRECASIA_PORTAL = customRender(registerBlock("precasia_portal", () -> new PortalBlock(AoADimensions.PRECASIA.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(207, 221, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> RUNANDOR_PORTAL = customRender(registerBlock("runandor_portal", () -> new PortalBlock(AoADimensions.RUNANDOR.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(124, 255, 255)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> SHYRELANDS_PORTAL = customRender(registerBlock("shyrelands_portal", () -> new PortalBlock(AoADimensions.SHYRELANDS.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(255, 255, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);
	public static final RegistryObject<Block> VOX_PONDS_PORTAL = customRender(registerBlock("vox_ponds_portal", () -> new PortalBlock(AoADimensions.VOX_PONDS.key, MaterialColor.COLOR_PURPLE, NumberUtil.RGB(90, 104, 0)), AoAItemGroups.FUNCTIONAL_BLOCKS), TRANSLUCENT);

	public static final RegistryObject<Block> NOWHERE_ACTIVITY_PORTAL = customRender(registerItemlessBlock("nowhere_activity_portal", NowhereActivityPortal::new), TRANSLUCENT);

	public static final RegistryObject<Block> VOX_CRATE = registerBlock("vox_crate", VoxCrate::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CREATION_FORGE = registerBlock("creation_forge", CreationForge::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> BLUE_CRYSTAL_CREATOR = registerBlock("blue_crystal_creator", () -> new CrystalCreator(MaterialColor.COLOR_BLUE, AoAItems.BLUE_GEMSTONES, AoAItems.BLUE_CRYSTAL), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> GREEN_CRYSTAL_CREATOR = registerBlock("green_crystal_creator", () -> new CrystalCreator(MaterialColor.COLOR_GREEN, AoAItems.GREEN_GEMSTONES, AoAItems.GREEN_CRYSTAL), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> PURPLE_CRYSTAL_CREATOR = registerBlock("purple_crystal_creator", () -> new CrystalCreator(MaterialColor.COLOR_PURPLE, AoAItems.PURPLE_GEMSTONES, AoAItems.PURPLE_CRYSTAL), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> RED_CRYSTAL_CREATOR = registerBlock("red_crystal_creator", () -> new CrystalCreator(MaterialColor.COLOR_RED, AoAItems.RED_GEMSTONES, AoAItems.RED_CRYSTAL), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> WHITE_CRYSTAL_CREATOR = registerBlock("white_crystal_creator", () -> new CrystalCreator(MaterialColor.TERRACOTTA_WHITE, AoAItems.WHITE_GEMSTONES, AoAItems.WHITE_CRYSTAL), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> YELLOW_CRYSTAL_CREATOR = registerBlock("yellow_crystal_creator", () -> new CrystalCreator(MaterialColor.COLOR_YELLOW, AoAItems.YELLOW_GEMSTONES, AoAItems.YELLOW_CRYSTAL), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> CRYSTAL_EXTENSION_SHRINE = registerBlock("crystal_extension_shrine", CrystalExtensionShrine::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DECLOGGING_TABLE = registerBlock("declogging_table", DecloggingTable::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DEEP_CASE = registerBlock("deep_case", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GRAY).stats(5f, 3f).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> DIVINE_STATION = registerBlock("divine_station", DivineStation::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> ENIGMA_TABLE = registerBlock("enigma_table", EnigmaTable::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> EXTRACTION_DEVICE = customRender(registerBlock("extraction_device", ExtractionDevice::new, AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> FRAME_BENCH = registerBlock("frame_bench", FrameBench::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> HAUNTING_TABLE = registerBlock("haunting_table", HauntingTable::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> INFUSION_TABLE = registerBlock("infusion_table", InfusionTable::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> IRO_CRATE = registerBlock("iro_crate", () -> new Block(new CompactProperties(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GRAY).stats(5f, 3f).sound(SoundType.METAL).get()), AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> LUNAR_CREATION_TABLE = registerBlock("lunar_creation_table", LunarCreationTable::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> MENDING_TABLE = registerBlock("mending_table", MendingTable::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> MINERALIZATION_STATION = registerBlock("mineralization_station", MineralizationStation::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> PETAL_CRAFTING_STATION = registerBlock("petal_crafting_station", PetalCraftingStation::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> RUNE_RANDOMIZER = registerBlock("rune_randomizer", RuneRandomizer::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> RUNE_SHRINE = registerBlock("rune_shrine", RuneShrine::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> RUNIC_BLOCK = registerBlock("runic_block", RunicBlock::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> TEA_SINK = customRender(registerBlock("tea_sink", TeaSink::new, AoAItemGroups.FUNCTIONAL_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> VOX_STORE_CRATE = registerBlock("vox_store_crate", VoxStoreCrate::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> WHITEWASHING_TABLE = registerBlock("whitewashing_table", WhitewashingTable::new, AoAItemGroups.FUNCTIONAL_BLOCKS);

	public static final RegistryObject<Block> ARCBULB = customRender(registerBlock("arcbulb", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> ARCFLOWER = customRender(registerBlock("arcflower", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLUE_CANDY_GRASS = customRender(registerBlock("blue_candy_grass", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLUE_CELEVIANS = customRender(registerBlock("blue_celevians", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLUE_CRYSTAL_PLANT = customRender(registerBlock("blue_crystal_plant", () -> new GenericPlantBlock(Material.GLASS, MaterialColor.COLOR_BLUE, SoundType.GLASS, 5, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLUE_DAYLOOMS = customRender(registerBlock("blue_daylooms", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLUE_GLOWSHROOM = customRender(registerBlock("blue_glowshroom", () -> new StaticMushroomBlock(new CompactProperties(Material.PLANT, MaterialColor.PLANT).sound(SoundType.FUNGUS).light(4).noClip().get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLUE_OCEALITES = customRender(registerBlock("blue_ocealites", () -> new GenericWaterPlant(Material.REPLACEABLE_WATER_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BUREAL_STOCKS = customRender(registerBlock("bureal_stocks", () -> new GenericWaterPlant(Material.REPLACEABLE_WATER_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> CANDYCANE = customRender(registerBlock("candycane", () -> new GenericPlantBlock(Material.STONE, MaterialColor.PLANT, SoundType.STONE, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> CREEP_BUSH = customRender(registerBlock("creep_bush", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> CREEP_FLOWERS = customRender(registerBlock("creep_flowers", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DAILEERS = customRender(registerBlock("daileers", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DAWN_BUSH = customRender(registerBlock("dawn_bush", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DAWN_FLOWER = customRender(registerBlock("dawn_flower", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DAWN_GRASS = customRender(registerBlock("dawn_grass", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DEAD_GRASS = customRender(registerBlock("dead_grass", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DEEP_BLOOMS = customRender(registerBlock("deep_blooms", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DEEP_GRASS = customRender(registerBlock("deep_grass", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> GREEN_CRYSTAL_PLANT = customRender(registerBlock("green_crystal_plant", () -> new GenericPlantBlock(Material.GLASS, MaterialColor.COLOR_BLUE, SoundType.GLASS, 5, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> GREEN_GLOWSHROOM = customRender(registerBlock("green_glowshroom", () -> new StaticMushroomBlock(new CompactProperties(Material.PLANT, MaterialColor.PLANT).sound(SoundType.FUNGUS).light(4).noClip().get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> GREEN_WATERWEEDS = customRender(registerBlock("green_waterweeds", () -> new GenericWaterPlant(Material.REPLACEABLE_WATER_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> HAUNTED_FLOWER = customRender(registerBlock("haunted_flower", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> HAVEN_GRASS_PLANT = customRender(registerBlock("haven_grass_plant", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> HORIZON_DAISIES = customRender(registerBlock("horizon_daisies", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> IROTOPS = customRender(registerBlock("irotops", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> IRO_GRASS = customRender(registerBlock("iro_grass", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_WEEDS = customRender(registerBlock("lelyetian_weeds", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_WEEDS_DOWN = customRender(registerBlock("lelyetian_weeds_down", () -> new UpsideDownGenericPlant(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LUCON_GRASS = customRender(registerBlock("lucon_grass", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LUNALIP = customRender(registerBlock("lunalip", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.DIRT, Material.GRASS), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LUNTAR = customRender(registerBlock("luntar", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.DIRT, Material.GRASS), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LURCHIANS = customRender(registerBlock("lurchians", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LYLIPS = customRender(registerBlock("lylips", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> MAGIAS = customRender(registerBlock("magias", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> MYSTIC_BUSH = customRender(registerBlock("mystic_bush", MysticBush::new, AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> MYSTIC_FERNS = customRender(registerBlock("mystic_ferns", MysticFerns::new, AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> ORANGE_GLOWSHROOM = customRender(registerBlock("orange_glowshroom", () -> new StaticMushroomBlock(new CompactProperties(Material.PLANT, MaterialColor.PLANT).sound(SoundType.FUNGUS).light(4).noClip().get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PINK_CANDY_GRASS = customRender(registerBlock("pink_candy_grass", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PINK_DAYLOOMS = customRender(registerBlock("pink_daylooms", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PURPLE_CELEVIANS = customRender(registerBlock("purple_celevians", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PURPLE_CRYSTAL_PLANT = customRender(registerBlock("purple_crystal_plant", () -> new GenericPlantBlock(Material.GLASS, MaterialColor.COLOR_BLUE, SoundType.GLASS, 5, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PURPLE_GLOWSHROOM = customRender(registerBlock("purple_glowshroom", () -> new StaticMushroomBlock(new CompactProperties(Material.PLANT, MaterialColor.PLANT).sound(SoundType.FUNGUS).light(4).noClip().get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RAINBOW_GRASS = customRender(registerBlock("rainbow_grass", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RAINBOW_GRASS2 = customRender(registerBlock("rainbow_grass2", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RAINBOW_GRASS3 = customRender(registerBlock("rainbow_grass3", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RED_CELEVIANS = customRender(registerBlock("red_celevians", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RED_CRYSTAL_PLANT = customRender(registerBlock("red_crystal_plant", () -> new GenericPlantBlock(Material.GLASS, MaterialColor.COLOR_BLUE, SoundType.GLASS, 5, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RED_WATERWEEDS = customRender(registerBlock("red_waterweeds", () -> new StackableWaterPlant(Material.REPLACEABLE_WATER_PLANT, MaterialColor.TERRACOTTA_RED, SoundType.GRASS, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RUNE_BULBS = customRender(registerBlock("rune_bulbs", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RUNIC_BUSH = customRender(registerBlock("runic_bush", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> SHYRE_WEED = customRender(registerBlock("shyre_weed", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> TANGLE_THORNS = customRender(registerBlock("tangle_thorns", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_BROWN, Material.DIRT, Material.GRASS), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> TRILLIAD_BLOOM = customRender(registerBlock("trilliad_bloom", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_CYAN, Material.DIRT, Material.GRASS), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> TUBEICLES = customRender(registerBlock("tubeicles", () -> new GenericPlantBlock(Material.REPLACEABLE_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> WHITE_CELEVIANS = customRender(registerBlock("white_celevians", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> WHITE_CRYSTAL_PLANT = customRender(registerBlock("white_crystal_plant", () -> new GenericPlantBlock(Material.GLASS, MaterialColor.COLOR_BLUE, SoundType.GLASS, 5, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> WHITE_WATERWEEDS = customRender(registerBlock("white_waterweeds", () -> new GenericWaterPlant(Material.REPLACEABLE_WATER_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_CRYSTAL_PLANT = customRender(registerBlock("yellow_crystal_plant", () -> new GenericPlantBlock(Material.GLASS, MaterialColor.COLOR_BLUE, SoundType.GLASS, 5, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_DAYLOOMS = customRender(registerBlock("yellow_daylooms", () -> new GenericPlantBlock(Material.PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_GLOWSHROOM = customRender(registerBlock("yellow_glowshroom", () -> new StaticMushroomBlock(new CompactProperties(Material.PLANT, MaterialColor.PLANT).sound(SoundType.FUNGUS).light(4).noClip().get()), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_WATERWEEDS = customRender(registerBlock("yellow_waterweeds", () -> new GenericWaterPlant(Material.REPLACEABLE_WATER_PLANT, MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);

	public static final RegistryObject<Block> BLUE_LOLLYPOP = customRender(registerBlock("blue_lollypop", () -> new MultiStackablePlant(Material.GLASS, MaterialColor.COLOR_BLUE, SoundType.GLASS, Material.GRASS, Material.DIRT).addStemBlock(AoABlocks.RED_LOLLYPOP, AoABlocks.YELLOW_LOLLYPOP), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RED_LOLLYPOP = customRender(registerBlock("red_lollypop", () -> new MultiStackablePlant(Material.GLASS, MaterialColor.COLOR_RED, SoundType.GLASS, Material.GRASS, Material.DIRT).addStemBlock(AoABlocks.BLUE_LOLLYPOP, AoABlocks.YELLOW_LOLLYPOP), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_LOLLYPOP = customRender(registerBlock("yellow_lollypop", () -> new MultiStackablePlant(Material.GLASS, MaterialColor.COLOR_YELLOW, SoundType.GLASS, Material.GRASS, Material.DIRT).addStemBlock(AoABlocks.BLUE_LOLLYPOP, AoABlocks.RED_LOLLYPOP), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> ANCIENT_VINES = customRender(registerBlock("ancient_vines", () -> new UpsideDownStackablePlant(MaterialColor.PLANT, Material.STONE).setHatBlock(AoABlocks.ANCIENT_VINES_CAP), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> ANCIENT_VINES_CAP = customRender(registerBlock("ancient_vines_cap", () -> new UpsideDownStackablePlant(MaterialColor.PLANT, Material.STONE).setStemBlock(AoABlocks.ANCIENT_VINES), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLOOD_PINE_STEM = customRender(registerBlock("blood_pine_stem", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.BLOOD_PINE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLOOD_PINE = customRender(registerBlock("blood_pine", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.BLOOD_PINE_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLOOD_SPIKES = customRender(registerBlock("blood_spikes", BloodSpikes::new, AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLOOD_STRANDS = customRender(registerBlock("blood_strands", () -> new StackablePlant(MaterialColor.COLOR_RED, Material.DIRT, Material.GRASS, Material.STONE, Material.VEGETABLE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BULB_STOCK = customRender(registerBlock("bulb_stock", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.BULB_STOCK_CAP), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BULB_STOCK_CAP = customRender(registerBlock("bulb_stock_cap", () -> new StackablePlant(MaterialColor.COLOR_RED, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.BULB_STOCK), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> CELEBULBS_STEM = customRender(registerBlock("celebulbs_stem", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.YELLOW_CELEBULBS), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> GREEN_CELEBULBS = customRender(registerBlock("green_celebulbs", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.CELEBULBS_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_CELEBULBS = customRender(registerBlock("yellow_celebulbs", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.CELEBULBS_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> CORAL_CAGE = customRender(registerBlock("coral_cage", () -> new StackableWaterPlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT, Material.STONE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> DAWNWOOD_BARS = customRender(registerBlock("dawnwood_bars", DawnwoodBars::new, AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> EYE_SHRUB_STEM = customRender(registerBlock("eye_shrub_stem", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.EYE_SHRUB), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> EYE_SHRUB = customRender(registerBlock("eye_shrub", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.EYE_SHRUB_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> GARDEN_GRASS = customRender(registerBlock("garden_grass", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLUE_HAVENDALES_STEM = customRender(registerBlock("blue_havendales_stem", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.BLUE_HAVENDALES), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> BLUE_HAVENDALES = customRender(registerBlock("blue_havendales", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.BLUE_HAVENDALES_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PINK_HAVENDALES_STEM = customRender(registerBlock("pink_havendales_stem", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.PINK_HAVENDALES), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PINK_HAVENDALES = customRender(registerBlock("pink_havendales", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.PINK_HAVENDALES_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_HAVENDALES_STEM = customRender(registerBlock("yellow_havendales_stem", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.YELLOW_HAVENDALES), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> YELLOW_HAVENDALES = customRender(registerBlock("yellow_havendales", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.YELLOW_HAVENDALES_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_STEM = customRender(registerBlock("lelyetian_stem", () -> new BidirectionalStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setBottomHatBlock(AoABlocks.LELYETIAN_STEM_CAP_DOWN).setHatBlock(AoABlocks.LELYETIAN_STEM_CAP), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_STEM_CAP = customRender(registerBlock("lelyetian_stem_cap", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.LELYETIAN_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_STEM_CAP_DOWN = customRender(registerBlock("lelyetian_stem_cap_down", () -> new UpsideDownStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.LELYETIAN_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_WIGGLER = customRender(registerBlock("lelyetian_wiggler", () -> new BidirectionalStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setBottomHatBlock(AoABlocks.LELYETIAN_WIGGLER_BOTTOM).setHatBlock(AoABlocks.LELYETIAN_WIGGLER_TOP), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_WIGGLER_BOTTOM = customRender(registerBlock("lelyetian_wiggler_bottom", () -> new UpsideDownStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.LELYETIAN_WIGGLER), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_WIGGLER_TOP = customRender(registerBlock("lelyetian_wiggler_top", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.LELYETIAN_WIGGLER), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> GREEN_PEPPERMINT = customRender(registerBlock("green_peppermint", () -> new StackablePlant(Material.GLASS, MaterialColor.PLANT, SoundType.GLASS, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> RED_PEPPERMINT = customRender(registerBlock("red_peppermint", () -> new StackablePlant(Material.GLASS, MaterialColor.PLANT, SoundType.GLASS, Material.GRASS, Material.DIRT), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> PLASTIC_STICK = customRender(registerBlock("plastic_stick", () -> new StackablePlant(Material.STONE, MaterialColor.PLANT, SoundType.STONE, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.CANDY_TUBE), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> CANDY_TUBE = customRender(registerBlock("candy_tube", () -> new StackablePlant(Material.GLASS, MaterialColor.PLANT, SoundType.GLASS, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.PLASTIC_STICK), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> SHYRE_STOCK = customRender(registerBlock("shyre_stock", () -> new BidirectionalStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setBottomHatBlock(AoABlocks.SHYRE_CAP_DOWN).setHatBlock(AoABlocks.SHYRE_CAP), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> SHYRE_CAP = customRender(registerBlock("shyre_cap", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.SHYRE_STOCK), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> SHYRE_CAP_DOWN = customRender(registerBlock("shyre_cap_down", () -> new UpsideDownStackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.SHYRE_STOCK), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> VOX_FUNGI_STEM = customRender(registerBlock("vox_fungi_stem", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setHatBlock(AoABlocks.VOX_FUNGI), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> VOX_FUNGI = customRender(registerBlock("vox_fungi", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT).setStemBlock(AoABlocks.VOX_FUNGI_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> VOX_TENTACLES_STEM = customRender(registerBlock("vox_tentacles_stem", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT, Material.SPONGE).setHatBlock(AoABlocks.VOX_TENTACLES), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);
	public static final RegistryObject<Block> VOX_TENTACLES = customRender(registerBlock("vox_tentacles", () -> new StackablePlant(MaterialColor.PLANT, Material.GRASS, Material.DIRT, Material.SPONGE).setStemBlock(AoABlocks.VOX_TENTACLES_STEM), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);

	public static final RegistryObject<Block> CREEP_VINES = customRender(registerBlock("creep_vines", () -> new VinesBlock(MaterialColor.COLOR_GREEN), AoAItemGroups.GENERATION_BLOCKS), CUTOUT);

	public static final RegistryObject<Block> BUBBLE_BERRY_CROP = customRender(registerItemlessBlock("bubble_berry_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.BUBBLE_BERRY_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> CHILLI_CROP = customRender(registerItemlessBlock("chilli_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.CHILLI_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> EYE_BULB_CROP = customRender(registerItemlessBlock("eye_bulb_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.EYE_BULB)), CUTOUT);
	public static final RegistryObject<Block> FLORACLES_CROP = customRender(registerItemlessBlock("floracles_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.FLORACLE_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> GOLDICAPS_CROP = customRender(registerItemlessBlock("goldicaps_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.GOLDICAP_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> HEART_FRUIT_CROP = customRender(registerItemlessBlock("heart_fruit_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.HEART_FRUIT_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> LUNACRIKE_CROP = customRender(registerItemlessBlock("lunacrike_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.LUNACRIKE_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> LUNA_GLOBE_CROP = customRender(registerItemlessBlock("luna_globe_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.LUNA_GLOBE_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> LUNALON_CROP = customRender(registerItemlessBlock("lunalon_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.LUNALON_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> MAGIC_MARANG_CROP = customRender(registerItemlessBlock("magic_marang_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.MAGIC_MARANG_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> MYSTIC_SHROOM_CROP = customRender(registerItemlessBlock("mystic_shroom_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.MYSTIC_SHROOMS)), CUTOUT);
	public static final RegistryObject<Block> ROSIDON_CROP = customRender(registerItemlessBlock("rosidon_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.ROSIDON_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> TEA_CROP = customRender(registerItemlessBlock("tea_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.TEA_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> THORNY_PLANT_CROP = customRender(registerItemlessBlock("thorny_plant_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.THORNY_PLANT_SEEDS)), CUTOUT);
	public static final RegistryObject<Block> TRILLIAD_CROP = customRender(registerItemlessBlock("trilliad_crop", () -> new CropBlock(MaterialColor.COLOR_GREEN, AoAItems.TRILLIAD_SEEDS)), CUTOUT);

	public static final RegistryObject<Block> LIVING_GROWTH = customRender(registerItemlessBlock("living_growth", LivingGrowth::new), CUTOUT);

	public static final RegistryObject<Block> POTTED_ACHONY_SAPLING = customRender(registerItemlessBlock("potted_achony_sapling", () -> new FlowerPotBlock(ACHONY_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_BLOODTWISTER_SAPLING = customRender(registerItemlessBlock("potted_bloodtwister_sapling", () -> new FlowerPotBlock(BLOODTWISTER_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_BLUE_CELEVUS_SAPLING = customRender(registerItemlessBlock("potted_blue_celevus_sapling", () -> new FlowerPotBlock(BLUE_CELEVUS_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_BLUE_HAVEN_SAPLING = customRender(registerItemlessBlock("potted_blue_haven_sapling", () -> new FlowerPotBlock(BLUE_HAVEN_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_BRIGHT_SHYRE_SAPLING = customRender(registerItemlessBlock("potted_bright_shyre_sapling", () -> new FlowerPotBlock(BRIGHT_SHYRE_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_CHURRY_SAPLING = customRender(registerItemlessBlock("potted_churry_sapling", () -> new FlowerPotBlock(CHURRY_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_CREEP_SAPLING = customRender(registerItemlessBlock("potted_creep_sapling", () -> new FlowerPotBlock(CREEP_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_DAWNWOOD_SAPLING = customRender(registerItemlessBlock("potted_dawnwood_sapling", () -> new FlowerPotBlock(DAWNWOOD_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_EYEBUSH_SAPLING = customRender(registerItemlessBlock("potted_eyebush_sapling", () -> new FlowerPotBlock(EYEBUSH_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_EYE_HANGER_SAPLING = customRender(registerItemlessBlock("potted_eye_hanger_sapling", () -> new FlowerPotBlock(EYE_HANGER_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_GREEN_CELEVUS_SAPLING = customRender(registerItemlessBlock("potted_green_celevus_sapling", () -> new FlowerPotBlock(GREEN_CELEVUS_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_HAUNTED_SAPLING = customRender(registerItemlessBlock("potted_haunted_sapling", () -> new FlowerPotBlock(HAUNTED_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_IRODUST_SAPLING = customRender(registerItemlessBlock("potted_irodust_sapling", () -> new FlowerPotBlock(IRODUST_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_IROGOLD_SAPLING = customRender(registerItemlessBlock("potted_irogold_sapling", () -> new FlowerPotBlock(IROGOLD_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_LUCALUS_SAPLING = customRender(registerItemlessBlock("potted_lucalus_sapling", () -> new FlowerPotBlock(LUCALUS_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_LUNICIA_SAPLING = customRender(registerItemlessBlock("potted_lunicia_sapling", () -> new FlowerPotBlock(LUNICIA_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_LUNOSSO_SAPLING = customRender(registerItemlessBlock("potted_lunosso_sapling", () -> new FlowerPotBlock(LUNOSSO_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_PINK_HAVEN_SAPLING = customRender(registerItemlessBlock("potted_pink_haven_sapling", () -> new FlowerPotBlock(PINK_HAVEN_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_PURPLE_CELEVUS_SAPLING = customRender(registerItemlessBlock("potted_purple_celevus_sapling", () -> new FlowerPotBlock(PURPLE_CELEVUS_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_PURPLE_HAVEN_SAPLING = customRender(registerItemlessBlock("potted_purple_haven_sapling", () -> new FlowerPotBlock(PURPLE_HAVEN_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_RED_CELEVUS_SAPLING = customRender(registerItemlessBlock("potted_red_celevus_sapling", () -> new FlowerPotBlock(RED_CELEVUS_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_RED_HAVEN_SAPLING = customRender(registerItemlessBlock("potted_red_haven_sapling", () -> new FlowerPotBlock(RED_HAVEN_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_RUNIC_SAPLING = customRender(registerItemlessBlock("potted_runic_sapling", () -> new FlowerPotBlock(RUNIC_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_SHADOW_SAPLING = customRender(registerItemlessBlock("potted_shadow_sapling", () -> new FlowerPotBlock(SHADOW_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_SHYRE_SAPLING = customRender(registerItemlessBlock("potted_shyre_sapling", () -> new FlowerPotBlock(SHYRE_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_STRANGLEWOOD_SAPLING = customRender(registerItemlessBlock("potted_stranglewood_sapling", () -> new FlowerPotBlock(STRANGLEWOOD_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_TURQUOISE_HAVEN_SAPLING = customRender(registerItemlessBlock("potted_turquoise_haven_sapling", () -> new FlowerPotBlock(TURQUOISE_HAVEN_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_YELLOW_CELEVUS_SAPLING = customRender(registerItemlessBlock("potted_yellow_celevus_sapling", () -> new FlowerPotBlock(YELLOW_CELEVUS_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_YELLOW_HAVEN_SAPLING = customRender(registerItemlessBlock("potted_yellow_haven_sapling", () -> new FlowerPotBlock(YELLOW_HAVEN_SAPLING.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_ARCBULB = customRender(registerItemlessBlock("potted_arcbulb", () -> new FlowerPotBlock(ARCBULB.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_ARCFLOWER = customRender(registerItemlessBlock("potted_arcflower", () -> new FlowerPotBlock(ARCFLOWER.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_BLUE_DAYLOOMS = customRender(registerItemlessBlock("potted_blue_daylooms", () -> new FlowerPotBlock(BLUE_DAYLOOMS.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_BLUE_GLOWSHROOM = customRender(registerItemlessBlock("potted_blue_glowshroom", () -> new FlowerPotBlock(BLUE_GLOWSHROOM.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_CANDYCANE = customRender(registerItemlessBlock("potted_candycane", () -> new FlowerPotBlock(CANDYCANE.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_DAWN_FLOWER = customRender(registerItemlessBlock("potted_dawn_flower", () -> new FlowerPotBlock(DAWN_FLOWER.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_GREEN_GLOWSHROOM = customRender(registerItemlessBlock("potted_green_glowshroom", () -> new FlowerPotBlock(GREEN_GLOWSHROOM.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_HAUNTED_FLOWER = customRender(registerItemlessBlock("potted_haunted_flower", () -> new FlowerPotBlock(HAUNTED_FLOWER.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_LUNALIP = customRender(registerItemlessBlock("potted_lunalip", () -> new FlowerPotBlock(LUNALIP.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_ORANGE_GLOWSHROOM = customRender(registerItemlessBlock("potted_orange_glowshroom", () -> new FlowerPotBlock(ORANGE_GLOWSHROOM.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_PURPLE_GLOWSHROOM = customRender(registerItemlessBlock("potted_purple_glowshroom", () -> new FlowerPotBlock(PURPLE_GLOWSHROOM.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_RUNIC_BUSH = customRender(registerItemlessBlock("potted_runic_bush", () -> new FlowerPotBlock(RUNIC_BUSH.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_YELLOW_DAYLOOMS = customRender(registerItemlessBlock("potted_yellow_daylooms", () -> new FlowerPotBlock(YELLOW_DAYLOOMS.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);
	public static final RegistryObject<Block> POTTED_YELLOW_GLOWSHROOM = customRender(registerItemlessBlock("potted_yellow_glowshroom", () -> new FlowerPotBlock(YELLOW_GLOWSHROOM.get(), new CompactProperties(Material.DECORATION, MaterialColor.NONE).noOcclusion().get())), CUTOUT);

	public static final RegistryObject<Block> TROPHY = registerBlock("trophy", TrophyBlock::new, AoAItemGroups.FUNCTIONAL_BLOCKS);
	public static final RegistryObject<Block> GOLD_TROPHY = registerBlock("gold_trophy", GoldTrophyBlock::new, AoAItemGroups.FUNCTIONAL_BLOCKS, Rarity.RARE);
	public static final RegistryObject<Block> ORNATE_TROPHY = customRender(registerBlock("ornate_trophy", OrnateTrophyBlock::new, AoAItemGroups.FUNCTIONAL_BLOCKS, Rarity.EPIC), TRANSLUCENT);
	
	public static final RegistryObject<Block> ANCIENT_BANNER = customRender(registerBlock("ancient_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_ANCIENT_BANNER = customRender(registerBlock("gilded_ancient_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_ANCIENT_BANNER = customRender(registerBlock("encrusted_ancient_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_ANCIENT_BANNER = customRender(registerBlock("bejewelled_ancient_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BARON_BANNER = customRender(registerBlock("baron_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_BARON_BANNER = customRender(registerBlock("gilded_baron_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_BARON_BANNER = customRender(registerBlock("encrusted_baron_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_BARON_BANNER = customRender(registerBlock("bejewelled_baron_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BLOOD_BANNER = customRender(registerBlock("blood_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_BLOOD_BANNER = customRender(registerBlock("gilded_blood_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_BLOOD_BANNER = customRender(registerBlock("encrusted_blood_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_BLOOD_BANNER = customRender(registerBlock("bejewelled_blood_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BOREIC_BANNER = customRender(registerBlock("boreic_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_BOREIC_BANNER = customRender(registerBlock("gilded_boreic_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_BOREIC_BANNER = customRender(registerBlock("encrusted_boreic_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_BOREIC_BANNER = customRender(registerBlock("bejewelled_boreic_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> CANDY_BANNER = customRender(registerBlock("candy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_CANDY_BANNER = customRender(registerBlock("gilded_candy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_CANDY_BANNER = customRender(registerBlock("encrusted_candy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_CANDY_BANNER = customRender(registerBlock("bejewelled_candy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> CLOWN_BANNER = customRender(registerBlock("clown_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_CLOWN_BANNER = customRender(registerBlock("gilded_clown_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_CLOWN_BANNER = customRender(registerBlock("encrusted_clown_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_CLOWN_BANNER = customRender(registerBlock("bejewelled_clown_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> CREATION_BANNER = customRender(registerBlock("creation_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_CREATION_BANNER = customRender(registerBlock("gilded_creation_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_CREATION_BANNER = customRender(registerBlock("encrusted_creation_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_CREATION_BANNER = customRender(registerBlock("bejewelled_creation_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> CREEPY_BANNER = customRender(registerBlock("creepy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_CREEPY_BANNER = customRender(registerBlock("gilded_creepy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_CREEPY_BANNER = customRender(registerBlock("encrusted_creepy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_CREEPY_BANNER = customRender(registerBlock("bejewelled_creepy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> CRYSTAL_BANNER = customRender(registerBlock("crystal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_CRYSTAL_BANNER = customRender(registerBlock("gilded_crystal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_CRYSTAL_BANNER = customRender(registerBlock("encrusted_crystal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_CRYSTAL_BANNER = customRender(registerBlock("bejewelled_crystal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> DEEP_BANNER = customRender(registerBlock("deep_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_DEEP_BANNER = customRender(registerBlock("gilded_deep_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_DEEP_BANNER = customRender(registerBlock("encrusted_deep_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_DEEP_BANNER = customRender(registerBlock("bejewelled_deep_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> DUSTOPIAN_BANNER = customRender(registerBlock("dustopian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_DUSTOPIAN_BANNER = customRender(registerBlock("gilded_dustopian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_DUSTOPIAN_BANNER = customRender(registerBlock("encrusted_dustopian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_DUSTOPIAN_BANNER = customRender(registerBlock("bejewelled_dustopian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENERGY_BANNER = customRender(registerBlock("energy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_ENERGY_BANNER = customRender(registerBlock("gilded_energy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_ENERGY_BANNER = customRender(registerBlock("encrusted_energy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_ENERGY_BANNER = customRender(registerBlock("bejewelled_energy_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> FUNGAL_BANNER = customRender(registerBlock("fungal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_FUNGAL_BANNER = customRender(registerBlock("gilded_fungal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_FUNGAL_BANNER = customRender(registerBlock("encrusted_fungal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_FUNGAL_BANNER = customRender(registerBlock("bejewelled_fungal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> HAUNTED_BANNER = customRender(registerBlock("haunted_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_HAUNTED_BANNER = customRender(registerBlock("gilded_haunted_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_HAUNTED_BANNER = customRender(registerBlock("encrusted_haunted_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_HAUNTED_BANNER = customRender(registerBlock("bejewelled_haunted_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> IMMORTAL_BANNER = customRender(registerBlock("immortal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_IMMORTAL_BANNER = customRender(registerBlock("gilded_immortal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_IMMORTAL_BANNER = customRender(registerBlock("encrusted_immortal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_IMMORTAL_BANNER = customRender(registerBlock("bejewelled_immortal_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> LELYETIAN_BANNER = customRender(registerBlock("lelyetian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_LELYETIAN_BANNER = customRender(registerBlock("gilded_lelyetian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_LELYETIAN_BANNER = customRender(registerBlock("encrusted_lelyetian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_LELYETIAN_BANNER = customRender(registerBlock("bejewelled_lelyetian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> LOTTO_BANNER = customRender(registerBlock("lotto_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_LOTTO_BANNER = customRender(registerBlock("gilded_lotto_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_LOTTO_BANNER = customRender(registerBlock("encrusted_lotto_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_LOTTO_BANNER = customRender(registerBlock("bejewelled_lotto_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> LUNAR_BANNER = customRender(registerBlock("lunar_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_LUNAR_BANNER = customRender(registerBlock("gilded_lunar_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_LUNAR_BANNER = customRender(registerBlock("encrusted_lunar_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_LUNAR_BANNER = customRender(registerBlock("bejewelled_lunar_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> MECHA_BANNER = customRender(registerBlock("mecha_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_MECHA_BANNER = customRender(registerBlock("gilded_mecha_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_MECHA_BANNER = customRender(registerBlock("encrusted_mecha_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_MECHA_BANNER = customRender(registerBlock("bejewelled_mecha_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> NETHER_BANNER = customRender(registerBlock("nether_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_NETHER_BANNER = customRender(registerBlock("gilded_nether_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_NETHER_BANNER = customRender(registerBlock("encrusted_nether_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_NETHER_BANNER = customRender(registerBlock("bejewelled_nether_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ROSIDIAN_BANNER = customRender(registerBlock("rosidian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_ROSIDIAN_BANNER = customRender(registerBlock("gilded_rosidian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_ROSIDIAN_BANNER = customRender(registerBlock("encrusted_rosidian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_ROSIDIAN_BANNER = customRender(registerBlock("bejewelled_rosidian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> RUNIC_BANNER = customRender(registerBlock("runic_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_RUNIC_BANNER = customRender(registerBlock("gilded_runic_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_RUNIC_BANNER = customRender(registerBlock("encrusted_runic_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_RUNIC_BANNER = customRender(registerBlock("bejewelled_runic_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> SHADOW_BANNER = customRender(registerBlock("shadow_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_SHADOW_BANNER = customRender(registerBlock("gilded_shadow_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_SHADOW_BANNER = customRender(registerBlock("encrusted_shadow_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_SHADOW_BANNER = customRender(registerBlock("bejewelled_shadow_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> SHYRE_BANNER = customRender(registerBlock("shyre_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_SHYRE_BANNER = customRender(registerBlock("gilded_shyre_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_SHYRE_BANNER = customRender(registerBlock("encrusted_shyre_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_SHYRE_BANNER = customRender(registerBlock("bejewelled_shyre_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> SOUL_BANNER = customRender(registerBlock("soul_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_SOUL_BANNER = customRender(registerBlock("gilded_soul_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_SOUL_BANNER = customRender(registerBlock("encrusted_soul_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_SOUL_BANNER = customRender(registerBlock("bejewelled_soul_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> UTOPIAN_BANNER = customRender(registerBlock("utopian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_UTOPIAN_BANNER = customRender(registerBlock("gilded_utopian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_UTOPIAN_BANNER = customRender(registerBlock("encrusted_utopian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_UTOPIAN_BANNER = customRender(registerBlock("bejewelled_utopian_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> VOID_BANNER = customRender(registerBlock("void_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_VOID_BANNER = customRender(registerBlock("gilded_void_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_VOID_BANNER = customRender(registerBlock("encrusted_void_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_VOID_BANNER = customRender(registerBlock("bejewelled_void_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> VOX_BANNER = customRender(registerBlock("vox_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> GILDED_VOX_BANNER = customRender(registerBlock("gilded_vox_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> ENCRUSTED_VOX_BANNER = customRender(registerBlock("encrusted_vox_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> BEJEWELLED_VOX_BANNER = customRender(registerBlock("bejewelled_vox_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> PLUTON_BANNER = customRender(registerBlock("pluton_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> LUXON_BANNER = customRender(registerBlock("luxon_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> EREBON_BANNER = customRender(registerBlock("erebon_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);
	public static final RegistryObject<Block> SELYAN_BANNER = customRender(registerBlock("selyan_banner", BannerBlock::new, AoAItemGroups.BANNERS), CUTOUT);

	public static final RegistryObject<Block> BANNER_EXTENSION = customRender(registerItemlessBlock("banner_extension", BannerExtension::new), CUTOUT);

	private static <T extends Block> RegistryObject<T> registerItemlessBlock(String registryName, Supplier<T> supplier) {
		return registerItemlessBlock(registryName, supplier, -1);
	}

	private static <T extends Block> RegistryObject<T> registerItemlessBlock(String registryName, Supplier<T> supplier, int furnaceBurnTime) {
		if (furnaceBurnTime > 0)
			GlobalEvents.addFurnaceFuel(supplier, furnaceBurnTime);

		return BLOCKS.register(registryName, supplier);
	}

	private static <T extends Block> RegistryObject<T> registerBlock(String registryName, Supplier<T> supplier, ItemGroup itemGroup) {
		return registerBlock(registryName, supplier, itemGroup, Rarity.COMMON, -1);
	}

	private static <T extends Block> RegistryObject<T> registerBlock(String registryName, Supplier<T> supplier, ItemGroup itemGroup, int furnaceBurnTime) {
		return registerBlock(registryName, supplier, itemGroup, Rarity.COMMON, furnaceBurnTime);
	}

	private static <T extends Block> RegistryObject<T> registerBlock(String registryName, Supplier<T> supplier, ItemGroup itemGroup, Rarity rarity) {
		return registerBlock(registryName, supplier, itemGroup, rarity, -1);
	}

	private static <T extends Block> RegistryObject<T> registerBlock(String registryName, Supplier<T> supplier, ItemGroup itemGroup, Rarity rarity, int furnaceBurnTime) {
		RegistryObject<T> block = BLOCKS.register(registryName, supplier);
		RegistryObject<Item> blockItem = BLOCK_ITEMS.register(registryName, () -> new BlockItem(block.get(), new Item.Properties().tab(itemGroup).rarity(rarity)));

		if (furnaceBurnTime > 0)
			GlobalEvents.addFurnaceFuel(supplier, furnaceBurnTime);

		return block;
	}

	private static <T extends Block> RegistryObject<T> customRender(RegistryObject<T> object, CustomRenderType renderType) {
		if (FMLEnvironment.dist == Dist.CLIENT)
			CUSTOM_RENDER_TYPES.put(object, renderType);

		return object;
	}

	private static AbstractBlock.Properties properties(Material material, MaterialColor mapColour) {
		return AbstractBlock.Properties.of(material, mapColour);
	}

	@OnlyIn(Dist.CLIENT)
	public static void setCustomRenderTypes() {
		for (Map.Entry<RegistryObject<? extends Block>, CustomRenderType> entry : CUSTOM_RENDER_TYPES.entrySet()) {
			Block bl = entry.getKey().get();

			switch (entry.getValue()) {
				case CUTOUT:
					RenderTypeLookup.setRenderLayer(bl, RenderType.cutout());
					break;
				case CUTOUT_MIPPED:
					RenderTypeLookup.setRenderLayer(bl, RenderType.cutoutMipped());
					break;
				case TRANSLUCENT:
					RenderTypeLookup.setRenderLayer(bl, RenderType.translucent());
					break;
			}

			if (bl instanceof FlowingFluidBlock) {
				RenderTypeLookup.setRenderLayer(((FlowingFluidBlock)bl).getFluid().getFlowing(), RenderType.translucent());
				RenderTypeLookup.setRenderLayer(((FlowingFluidBlock)bl).getFluid().getSource(), RenderType.translucent());
			}
		}

		CUSTOM_RENDER_TYPES.clear();
	}

	enum CustomRenderType {
		CUTOUT,
		CUTOUT_MIPPED,
		TRANSLUCENT
	}
}
